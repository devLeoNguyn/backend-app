openapi: 3.0.0
info:
  title: 'Movie Backend Frontend API'
  description: "API documentation cho Frontend của ứng dụng Movie Backend\n\n**🎯 FRONTEND ONLY APIs:**\n\nFile này chỉ chứa các APIs dành cho Frontend. Các APIs dành cho Admin đã được tách sang `admin-swagger.yaml`.\n\n**📱 Cách triển khai nút \"Xem tất cả\" cho các section:**\n```javascript\n// 1. Hiển thị section ban đầu (8-10 phim)\nfetch('/api/home/trending')\n\n// 2. Khi user click \"Xem tất cả\" → hiển thị tối đa 20 phim  \nfetch('/api/home/trending?showAll=true')\n\n// 3. Áp dụng cho tất cả sections:\n// - /api/home/trending?showAll=true\n// - /api/home/top-rated?showAll=true  \n// - /api/home/anime?showAll=true\n// - /api/home/vietnamese?showAll=true\n// - /api/home/sports?showAll=true\n// - /api/home/coming-soon?showAll=true\n// - /api/series/trending?showAll=true\n// - /api/series/vietnamese?showAll=true\n// - /api/series/anime?showAll=true\n// - /api/series/korean?showAll=true\n```\n\n**🚀 CẬP NHẬT API CONSISTENCY v1.4.0:**\n- ✅ **Tách Admin APIs:** Tất cả APIs quản lý được tách sang `admin-swagger.yaml`\n- ✅ **Frontend Focus:** File này chỉ tập trung vào Frontend development\n- ✅ **Tối ưu hóa API:** Loại bỏ duplicate endpoints  \n- ✅ **Nhất quán dữ liệu:** 1 API duy nhất cho màn hình chi tiết phim\n- ❌ **Đã XÓA:** `/api/users/{userId}/interactions/movie/{movieId}` (trùng lặp)\n- ✅ **SỬ DỤNG:** `/api/movies/{id}/detail-with-interactions?userId={userId}` cho màn hình detail\n\n**📋 ADMIN APIs ĐÃ TÁCH:**\n- Genre CRUD operations → `admin-swagger.yaml`\n- Upload image/video management → `admin-swagger.yaml`\n- Rental statistics & analytics → `admin-swagger.yaml`\n- Cron job management → `admin-swagger.yaml`\n- User analytics & reports → `admin-swagger.yaml`\n\n**🔄 AUTHENTICATION:**\n- ❌ Đã bỏ JWT tokens  \n- ❌ Đã bỏ authentication middleware\n- ✅ Sử dụng userId đơn giản\n- ✅ Default limit 20 cho tất cả sections\n\n**📋 FLOW AUTH (1 màn hình duy nhất):**\n1. **Màn hình nhập SĐT:** User nhập số điện thoại\n2. **Hệ thống check:** \n   - Nếu SĐT đã đăng ký → Gửi OTP đăng nhập → Verify → Vào trang chủ\n   - Nếu SĐT chưa đăng ký → Gửi OTP đăng ký → Verify → Nhập thông tin → Vào trang chủ\n3. **Lưu userId:** Store trong AsyncStorage/localStorage để dùng cho các API khác\n\n**📱 CÁC BƯỚC THỰC HIỆN:**\n1. Gọi `/api/auth/send-otp` với số điện thoại\n2. Gọi `/api/auth/verify-otp` để xác thực\n3. Nếu response có `needsRegistration: true` → Gọi `/api/auth/complete-registration`\n4. Nếu response có `needsRegistration: false` → Đăng nhập thành công, vào trang chủ\n\n**🎬 MOVIE DETAIL SCREEN WORKFLOW:**\n```javascript\n// 1. Load movie detail (API chính thức duy nhất)\nGET /api/movies/{id}/detail-with-interactions?userId={userId}\n// → Trả về: movie info + user interactions + UI tabs config\n\n// 2. User actions (realtime updates)\nPUT /api/ratings/movies/{id}/like        // Toggle like\nPUT /api/favorites/movies/{id}           // Toggle favorite  \nPUT /api/watching/progress/{episodeId}   // Update progress\n\n// 3. Video streaming\nGET /api/video-url/{episodeId}          // Get stream URLs\n```\n\n**❌ DEPRECATED:** `/api/users/{userId}/interactions/movie/{movieId}` (removed - duplicate functionality)\n"
  version: 1.4.0
  contact:
    email: frontend-team@movieapp.com
servers:
  -
    url: 'http://localhost:3003'
    description: 'Development server'
  -
    url: 'https://backend-app-lou3.onrender.com'
    description: 'Production server'
tags:
  -
    name: Anime
    description: 'Các API liên quan đến anime/hoạt hình (/api/anime) - Frontend, bao gồm banner, series, movies, trending, categories'
  -
    name: Authentication
    description: 'Các API liên quan đến xác thực người dùng (/api/auth) - Trả về userId'
  -
    name: User
    description: "Các API liên quan đến thông tin người dùng (/api/users) - Cần userId (Frontend)\n\n**🚨 IMPORTANT CHANGE:** Đã XÓA `/api/users/{userId}/interactions/movie/{movieId}` \n→ Sử dụng `/api/movies/{id}/detail-with-interactions?userId={userId}` thay thế\n\n**📋 ADMIN APIs đã tách:** Các API quản lý user dành cho Admin được tách sang `admin-swagger.yaml`\n"
  -
    name: Movie
    description: 'Các API liên quan đến phim (/api/movies) - Frontend only'
  -
    name: Episode
    description: 'Các API liên quan đến tập phim (/api/episodes) - Frontend only'
  -
    name: Favorite
    description: 'Các API liên quan đến danh sách yêu thích (/api/favorites) - Frontend, cần userId'
  -
    name: Payment
    description: 'Các API liên quan đến thanh toán (/api/payments) - Frontend, cần userId'
  -
    name: Rental
    description: 'Các API liên quan đến thuê phim (/api/rentals) - Frontend, cần userId, PayOS integration\n\n**📋 ADMIN APIs đã tách:** Stats và cron management APIs được tách sang `admin-swagger.yaml`'
  -
    name: Rating
    description: 'Các API liên quan đến đánh giá (/api/ratings) - Frontend, cần userId'
  -
    name: Genre
    description: 'Các API liên quan đến thể loại phim (/api/genres) - Frontend\n\n**📋 ADMIN APIs đã tách:** CRUD operations cho genres được tách sang `admin-swagger.yaml`'
  -
    name: Home
    description: 'Các API trang chủ (/api/home) - Banner, phim mới, đề xuất (Frontend)'
  -
    name: Series
    description: 'Các API cho phim bộ/series (/api/series) - Banner, trending, phân loại theo quốc gia (Frontend)'
  -
    name: 'Video Player'
    description: 'Các API cho màn hình phát video (/api/video-url, /api/watching, /api/episodes) - Stream URLs, progress tracking, interactions (Frontend)'
  -
    name: 'Movie Interactions'
    description: 'Các API tương tác với phim - Like, favorite, comment (Frontend)'
paths:
# asasas
  /api/auth/send-otp:
    post:
      tags:
        - Authentication
      summary: '🔄 Gửi mã OTP (Đăng ký/Đăng nhập thống nhất) (Frontend)'
      description: "**🔄 FLOW MỚI:** Gửi mã OTP cho cả đăng ký và đăng nhập trong 1 API duy nhất.\n\n**Logic xử lý:**\n- Nếu số điện thoại đã tồn tại → Gửi OTP đăng nhập\n- Nếu số điện thoại chưa tồn tại → Gửi OTP đăng ký\n- Frontend không cần biết user đã đăng ký hay chưa\n\n**Đặc điểm:**\n- Mã OTP có 6 số, gửi qua SMS\n- OTP có thời hạn (thường 5 phút)\n- Rate limiting: Tối đa 3 lần/phút\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhoneRequest'
      responses:
        '200':
          description: 'Gửi OTP thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'Đã gửi mã OTP'}
                  data: {type: object, properties: {phone: {type: string, example: '0912345678'}, isExistingUser: {type: boolean, example: true, description: 'true = user đã đăng ký (đăng nhập), false = user mới (đăng ký)'}}}
              example:
                status: success
                message: 'Đã gửi mã OTP đăng nhập'
                data:
                  phone: '0912345678'
                  isExistingUser: true
        '400':
          description: 'Lỗi validate số điện thoại'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/verify-otp:
    post:
      tags:
        - Authentication
      summary: '🔄 Xác thực OTP (Đăng ký/Đăng nhập thống nhất) (Frontend)'
      description: "**🔄 FLOW MỚI:** Xác thực mã OTP cho cả đăng ký và đăng nhập.\n\n**Response paths:**\n1. **User đã đăng ký:** `needsRegistration: false` → Frontend vào trang chủ\n2. **User chưa đăng ký:** `needsRegistration: true` → Frontend chuyển màn hình nhập thông tin\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyOTPRequest'
      responses:
        '200':
          description: 'Xác thực OTP thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'Xác thực OTP thành công'}
                  data: {type: object, properties: {needsRegistration: {type: boolean, example: false, description: 'false = đăng nhập thành công, true = cần nhập thông tin đăng ký'}, userId: {type: string, example: 683d7b63d0ee4aeb15a11369, description: 'Chỉ có khi needsRegistration = false'}, user: {$ref: '#/components/schemas/UserInfo', description: 'Chỉ có khi needsRegistration = false'}}}
              examples:
                existing_user:
                  summary: 'User đã đăng ký (đăng nhập thành công)'
                  value: {status: success, message: 'Đăng nhập thành công', data: {needsRegistration: false, userId: 683d7b63d0ee4aeb15a11369, user: {_id: 683d7b63d0ee4aeb15a11369, uid: 683d7b63d0ee4aeb15a11369, full_name: 'Nguyễn Văn A', email: example@gmail.com, phone: '0912345678', gender: male, avatar: 'https://example.com/avatar.jpg', is_phone_verified: true}}}
                new_user:
                  summary: 'User chưa đăng ký (cần nhập thông tin)'
                  value: {status: success, message: 'Xác thực OTP thành công, vui lòng nhập thông tin', data: {needsRegistration: true}}
        '400':
          description: 'Mã OTP không hợp lệ hoặc đã hết hạn'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/complete-registration:
    post:
      tags:
        - Authentication
      summary: '🔄 Hoàn tất đăng ký (Sau khi verify OTP) (Frontend)'
      description: "**🔄 FLOW MỚI:** Hoàn tất quá trình đăng ký sau khi verify OTP thành công.\n\n**Khi nào sử dụng:**\n- Khi `/api/auth/verify-otp` trả về `needsRegistration: true`\n- User đã xác thực số điện thoại, giờ cần nhập thông tin cá nhân\n\n**⚠️ QUAN TRỌNG:**\n- Không cần truyền phone, hệ thống tự động lấy từ OTP record đã verify\n- Phải gọi trong vòng 10 phút sau khi verify OTP thành công\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              full_name: 'Nguyễn Văn A'
              email: example@gmail.com
              gender: male
      responses:
        '201':
          description: 'Đăng ký thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: 'Lỗi validate dữ liệu, email đã tồn tại, hoặc phone không hợp lệ'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: '🔄 Đăng xuất (Frontend)'
      description: "Đăng xuất người dùng (chỉ trả về success message).\n\n**📱 Frontend cần làm:**\n- Xóa `userId` khỏi AsyncStorage/localStorage\n- Không cần gọi API refresh token hay gì cả\n"
      responses:
        '200':
          description: 'Đăng xuất thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'Đăng xuất thành công'}
  /api/users/profile:
    get:
      tags:
        - User
      summary: 'Lấy thông tin profile (Frontend)'
      description: "Lấy thông tin chi tiết của user.\n\n**🔄 THAY ĐỔI:** Không cần Bearer token, chỉ cần truyền userId qua query params\n"
      parameters:
        -
          name: userId
          in: query
          required: true
          schema:
            type: string
          example: 683d7b63d0ee4aeb15a11369
          description: 'ID của user cần lấy thông tin'
      responses:
        '200':
          description: 'Lấy thông tin thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
              example:
                status: success
                data:
                  user: {_id: 683d7b63d0ee4aeb15a11369, uid: 683d7b63d0ee4aeb15a11369, full_name: 'Nguyễn Văn A', email: example@gmail.com, phone: '0912345678', gender: male, avatar: 'https://example.com/avatar.jpg', is_phone_verified: true}
        '400':
          description: 'Thiếu userId hoặc userId không hợp lệ'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'userId là bắt buộc'
        '404':
          description: 'Không tìm thấy user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Không tìm thấy user'
    put:
      tags:
        - User
      summary: '🔄 Cập nhật profile (với upload avatar) (Frontend)'
      description: "**🔄 API ĐÃ CẬP NHẬT:** Hỗ trợ upload avatar trực tiếp lên Cloudflare Images + cập nhật thông tin profile.\n\n**📋 TÍNH NĂNG:**\n- ✅ Cập nhật họ tên, giới tính\n          - ✅ Upload avatar lên Cloudflare Images (auto delete avatar cũ)\n- ✅ Validation file ảnh (JPEG, PNG, GIF, max 2MB)\n- ✅ Unified API: có thể update chỉ text hoặc chỉ avatar hoặc cả hai\n\n**📤 REQUEST FORMAT:**\n- **Content-Type:** `multipart/form-data` (bắt buộc)\n- **Text fields:** full_name, gender\n- **File field:** avatar (optional)\n\n**📁 S3 STORAGE:**\n- Path: `assets/avatar-users/{uuid}.{ext}`\n- Auto generate unique filename\n- Auto delete old avatar khi upload mới\n\n**⚠️ LƯU Ý:**\n- Phone, email KHÔNG thể cập nhật qua API này (readonly)\n- Avatar file: JPEG/PNG/GIF, max 2MB\n- Nếu không upload avatar → chỉ update text fields\n"
      parameters:
        -
          name: userId
          in: query
          required: true
          schema:
            type: string
          example: 684269635fb34def3a1e28fd
          description: 'ID của user cần cập nhật'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                  description: 'Họ và tên người dùng'
                  example: 'Đạt Thiện'
                gender:
                  type: string
                  enum: [male, female, other]
                  description: 'Giới tính: male=Nam, female=Nữ, other=Khác'
                  example: male
                avatar:
                  type: string
                  format: binary
                  description: 'File ảnh đại diện (JPEG/PNG/GIF, max 2MB)'
            encoding:
              avatar:
                contentType: 'image/jpeg, image/png, image/gif'
            examples:
              update_text_only:
                summary: 'Chỉ cập nhật text (không upload avatar)'
                value:
                  full_name: 'Đạt Thiện Updated'
                  gender: male
              update_with_avatar:
                summary: 'Cập nhật text + upload avatar'
                value:
                  full_name: 'Đạt Thiện Updated'
                  gender: male
                  avatar: '[BINARY FILE DATA]'
      responses:
        '200':
          description: '✅ Cập nhật thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
              examples:
                text_only_update:
                  summary: 'Cập nhật chỉ text thành công'
                  value: {status: success, message: '✅ User profile updated successfully', data: {user: {_id: 684269635fb34def3a1e28fd, uid: 684269635fb34def3a1e28fd, full_name: 'Đạt Thiện Updated', email: datthien@gmail.com, phone: '0288348192', gender: male, avatar: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/old-avatar/avatar', is_phone_verified: true}}}
                avatar_upload_success:
                  summary: 'Upload avatar + cập nhật text thành công'
                  value: {status: success, message: '✅ User profile updated successfully', data: {user: {_id: 684269635fb34def3a1e28fd, uid: 684269635fb34def3a1e28fd, full_name: 'Đạt Thiện Updated', email: datthien@gmail.com, phone: '0288348192', gender: male, avatar: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/32c5a14e-3fa0-497a-b036-32de0cdc842a/avatar', is_phone_verified: true}}}
        '400':
          description: '❌ Lỗi validation hoặc file'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_userId:
                  summary: 'Thiếu userId'
                  value: {status: error, message: 'userId là bắt buộc'}
                file_too_large:
                  summary: 'File quá lớn'
                  value: {status: error, message: 'Tệp quá lớn. Chỉ cho phép tệp nhỏ hơn 2MB'}
                invalid_file_type:
                  summary: 'Loại file không hợp lệ'
                  value: {status: error, message: 'Chỉ cho phép file ảnh (JPEG, PNG, GIF)'}
                s3_upload_error:
                  summary: 'Lỗi upload S3'
                  value: {status: error, message: 'Lỗi khi upload file lên S3'}
        '404':
          description: '❌ Không tìm thấy user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Không tìm thấy user'
        '500':
          description: '❌ Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Lỗi server khi xử lý upload'
  '/api/users/{userId}/interactions/summary':
    get:
      tags:
        - User
      summary: '📊 Tổng kết tương tác người dùng [ĐÃ GIỮ LẠI] (Frontend/Admin)'
      description: "**📊 API TỔNG KẾT:** Lấy thống kê tổng quan về hoạt động tương tác của user.\n\n**🚨 LƯU Ý:** API này KHÁC với API đã xóa:\n- ❌ **Đã XÓA:** `/api/users/{userId}/interactions/movie/{movieId}` (trùng lặp)\n- ✅ **GIỮ LẠI:** `/api/users/{userId}/interactions/summary` (thống kê tổng quan)\n\n**💡 Use Cases:**\n- Profile/Dashboard hiển thị thống kê user\n- Activity summary cho user\n- Analytics về engagement của user\n\n**🔄 WORKFLOW:**\n- Dùng cho màn hình Profile/Dashboard\n- KHÔNG dùng cho màn hình chi tiết phim (dùng getMovieDetailWithInteractions)\n"
      parameters:
        -
          name: userId
          in: query
          required: true
          schema:
            type: string
          example: 683d7b63d0ee4aeb15a11369
          description: 'ID của user cần lấy thống kê'
      responses:
        '200':
          description: '✅ Lấy thống kê thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {userId: {type: string, example: 683d7b63d0ee4aeb15a11369}, userName: {type: string, example: 'Nguyễn Văn A'}, stats: {type: object, properties: {totalRatings: {type: integer, example: 25, description: 'Tổng số lượt đánh giá'}, totalLikes: {type: integer, example: 18, description: 'Tổng số lượt thích'}, totalFavorites: {type: integer, example: 12, description: 'Tổng số phim yêu thích'}, totalWatchingRecords: {type: integer, example: 45, description: 'Tổng số tập đã xem'}, completedEpisodes: {type: integer, example: 32, description: 'Tổng số tập đã hoàn thành'}, totalWatchTime: {type: integer, example: 64800, description: 'Tổng thời gian xem (giây)'}, totalWatchTimeFormatted: {type: string, example: '18h 0m', description: 'Thời gian xem formatted'}, avgWatchPercentage: {type: integer, example: 78, description: 'Phần trăm xem trung bình'}}}, recentActivity: {type: array, items: {type: object, properties: {_id: {type: string, example: rating_id}, movieId: {type: string, example: movie_id}, movieTitle: {type: string, example: Spider-Man}, movieType: {type: string, example: 'Phim lẻ'}, poster: {type: string, example: 'https://example.com/poster.jpg'}, action: {type: string, enum: [commented, liked], example: liked}, comment: {type: string, example: 'Phim hay quá!', description: 'Comment của user (có thể null)'}, isLike: {type: boolean, example: true}, createdAt: {type: string, format: date-time, example: '2024-01-15T10:30:00Z'}}}}}}
              example:
                status: success
                data:
                  userId: 683d7b63d0ee4aeb15a11369
                  userName: 'Nguyễn Văn A'
                  stats: {totalRatings: 25, totalLikes: 18, totalFavorites: 12, totalWatchingRecords: 45, completedEpisodes: 32, totalWatchTime: 64800, totalWatchTimeFormatted: '18h 0m', avgWatchPercentage: 78}
                  recentActivity: [{_id: rating123, movieId: movie456, movieTitle: 'Spider-Man: No Way Home', movieType: 'Phim lẻ', poster: 'https://example.com/spiderman.jpg', action: liked, comment: null, isLike: true, createdAt: '2024-01-15T10:30:00Z'}]
        '404':
          description: '❌ Không tìm thấy user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Không tìm thấy user'
        '500':
          description: '❌ Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/home/new-releases:
    get:
      tags:
        - Home
      summary: 'API Banner và Phim đề xuất (Frontend)'
      description: "Lấy danh sách phim mới ra mắt cho Banner đầu trang và danh sách ở dưới \"Phim dành cho bạn\".\n\n**Đặc điểm:**\n- Public API (không cần đăng nhập)\n- Chỉ lấy phim có release_status = \"released\"\n- Sắp xếp theo ngày tạo mới nhất\n- Trả về 2 sections riêng biệt\n"
      parameters:
        -
          name: bannerLimit
          in: query
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 10
          description: 'Số lượng phim trong banner list (mặc định 5)'
          example: 3
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 6
            minimum: 1
            maximum: 12
          description: 'Số lượng phim trong grid "Phim dành cho bạn" (mặc định 6)'
          example: 4
        -
          name: days
          in: query
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 365
          description: 'Lấy phim mới trong X ngày gần đây (mặc định 30 ngày)'
          example: 15
      responses:
        '200':
          description: 'Lấy dữ liệu thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {banner: {type: object, properties: {title: {type: string, example: 'Phim mới ra mắt'}, type: {type: string, example: banner_list}, movies: {type: array, items: {$ref: '#/components/schemas/BannerMovie'}}}}, recommended: {type: object, properties: {title: {type: string, example: 'Phim dành cho bạn'}, type: {type: string, example: grid}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/home/continue-watching:
    get:
      tags:
        - Home
      summary: 'API Đang xem (Cần userId sẽ phát triển trong tương lai) (Frontend)'
      description: "Lấy danh sách phim đang xem của user.\n\n**🔄 THAY ĐỔI:** Cần truyền userId qua query params thay vì Bearer token\n"
      parameters:
        -
          name: userId
          in: query
          required: true
          schema:
            type: string
          example: 683d7b63d0ee4aeb15a11369
          description: 'ID của user cần lấy danh sách đang xem'
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
          example: 20
      responses:
        '200':
          description: 'Lấy dữ liệu thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Đang xem'}, type: {type: string, example: continue_watching}, data: {type: array, items: {type: object, properties: {movieId: {type: string, example: 60d5ecb74df5e2001f8b4567}, title: {type: string, example: Avatar}, poster: {type: string, example: 'https://example.com/poster.jpg'}, progress: {type: number, example: 0.65}, lastWatchedAt: {type: string, format: date-time, example: '2023-12-01T10:30:00Z'}}}}}}
        '400':
          description: 'Thiếu userId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'userId là bắt buộc'
  /api/home/trending:
    get:
      tags:
        - Home
      summary: 'API Phim đang thịnh hành (Frontend)'
      description: "Lấy danh sách phim đang thịnh hành (được xem nhiều nhất).\n\n**Đặc điểm:**\n- Public API (không cần đăng nhập)\n- Sắp xếp theo view count\n- Format giống GridMovie\n\n**🔥 FRONTEND \"XEM TẤT CẢ\" BUTTON:**\n```javascript\n// Hiển thị section ban đầu (10 phim)\nGET /api/home/trending\n\n// Khi user nhấn \"Xem tất cả\" → hiển thị tối đa 20 phim\nGET /api/home/trending?showAll=true\n```\n"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**🎯 NÚT \"XEM TẤT CẢ\"**\n\n- `false`: Hiển thị section mặc định (10 phim) ⭐ **Dành cho trang chủ**\n- `true`: Hiển thị tối đa 20 phim ⭐ **Dành cho nút \"Xem tất cả\"**\n"
          example: true
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 20
          description: 'Số lượng phim trending (chỉ áp dụng khi showAll=true, mặc định 20)'
          example: 20
      responses:
        '200':
          description: 'Lấy dữ liệu thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Phim đang thịnh hành'}, type: {type: string, example: grid}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/home/top-rated:
    get:
      tags:
        - Home
      summary: 'API Phim được đánh giá cao (Frontend)'
      description: "Lấy danh sách phim được đánh giá cao nhất.\n\n**Đặc điểm:**\n- Public API (không cần đăng nhập)\n- Sắp xếp theo rating\n- Chỉ lấy phim có rating > 0\n\n**⭐ FRONTEND \"XEM TẤT CẢ\" BUTTON:**\n```javascript\n// Hiển thị section ban đầu (8 phim)\nGET /api/home/top-rated\n\n// Khi user nhấn \"Xem tất cả\" → hiển thị tối đa 20 phim\nGET /api/home/top-rated?showAll=true\n```\n"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**🎯 NÚT \"XEM TẤT CẢ\"**\n\n- `false`: Hiển thị section mặc định (8 phim) ⭐ **Dành cho trang chủ**\n- `true`: Hiển thị tối đa 20 phim ⭐ **Dành cho nút \"Xem tất cả\"**\n"
          example: true
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 20
          description: 'Số lượng phim top-rated (chỉ áp dụng khi showAll=true, mặc định 20)'
          example: 20
      responses:
        '200':
          description: 'Lấy dữ liệu thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Phim được đánh giá cao'}, type: {type: string, example: grid}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/home/sports:
    get:
      tags:
        - Home
      summary: 'API Sự kiện thể thao (Frontend)'
      description: "Lấy danh sách sự kiện thể thao.\n\n**Đặc điểm:**\n- Public API (không cần đăng nhập)\n- Chỉ lấy movie_type = \"Thể thao\"\n- Filter theo status (upcoming, released, ended)\n\n**⚽ FRONTEND \"XEM TẤT CẢ\" BUTTON:**\n```javascript\n// Hiển thị section ban đầu (8 sự kiện)\nGET /api/home/sports\n\n// Khi user nhấn \"Xem tất cả\" → hiển thị tối đa 20 sự kiện\nGET /api/home/sports?showAll=true\n```\n"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**🎯 NÚT \"XEM TẤT CẢ\"**\n\n- `false`: Hiển thị section mặc định (8 sự kiện) ⭐ **Dành cho trang chủ**\n- `true`: Hiển thị tối đa 20 sự kiện ⭐ **Dành cho nút \"Xem tất cả\"**\n"
          example: true
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 20
          description: 'Số lượng sự kiện thể thao (chỉ áp dụng khi showAll=true, mặc định 20)'
          example: 20
        -
          name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - upcoming
              - released
              - ended
          description: "Filter theo trạng thái sự kiện:\n- upcoming: Sự kiện sắp diễn ra\n- released: Sự kiện đã phát hành (mặc định)\n- ended: Sự kiện đã kết thúc\n"
          example: released
      responses:
        '200':
          description: 'Lấy dữ liệu thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Sự kiện thể thao'}, type: {type: string, example: grid}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/home/anime:
    get:
      tags:
        - Home
      summary: 'API Anime/Hoạt hình hot (Frontend)'
      description: "Lấy danh sách anime/hoạt hình nổi bật với logic đặc trưng.\n\n**Fontend sử dụng cho:**\n- Section \"Anime hot\"\n- Grid layout hoạt hình\n- Hiển thị poster anime với tỉ lệ đặc biệt\n\n**🌸 FRONTEND \"XEM TẤT CẢ\" BUTTON:**\n```javascript\n// Hiển thị section ban đầu (8 anime)\nGET /api/home/anime\n\n// Khi user nhấn \"Xem tất cả\" → hiển thị tối đa 20 anime\nGET /api/home/anime?showAll=true\n```\n"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**🎯 NÚT \"XEM TẤT CẢ\"**\n\n- `false`: Hiển thị section mặc định (8 anime) ⭐ **Dành cho trang chủ**\n- `true`: Hiển thị tối đa 20 anime ⭐ **Dành cho nút \"Xem tất cả\"**\n"
          example: true
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 20
          description: 'Số lượng anime hot (chỉ áp dụng khi showAll=true, mặc định 20)'
          example: 20
      responses:
        '200':
          description: 'Lấy dữ liệu thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Anime hot'}, type: {type: string, example: grid}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
              example:
                status: success
                data:
                  title: 'Anime hot'
                  type: string
                  movies: []
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Lỗi khi lấy anime hot'
  /api/home/vietnamese:
    get:
      tags:
        - Home
      summary: 'API Phim Việt đặc sắc (Frontend)'
      description: "Lấy danh sách phim Việt Nam với logic tìm kiếm đặc trưng.\n\n**Logic đặc trưng:**\n- Sắp xếp theo rating (phim có rating cao nhất)\n- Tính toán rating/viewCount        \n\n**Fontend sử dụng cho:**\n- Section \"Phim Việt đặc sắc\"\n- Grid layout phim Việt\n- Hiển thị poster phim Việt Nam\n\n**🇻🇳 FRONTEND \"XEM TẤT CẢ\" BUTTON:**\n```javascript\n// Hiển thị section ban đầu (8 phim Việt)\nGET /api/home/vietnamese\n\n// Khi user nhấn \"Xem tất cả\" → hiển thị tối đa 20 phim Việt\nGET /api/home/vietnamese?showAll=true\n```\n"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**🎯 NÚT \"XEM TẤT CẢ\"**\n\n- `false`: Hiển thị section mặc định (8 phim Việt) ⭐ **Dành cho trang chủ**\n- `true`: Hiển thị tối đa 20 phim Việt ⭐ **Dành cho nút \"Xem tất cả\"**\n"
          example: true
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 20
          description: 'Số lượng phim Việt (chỉ áp dụng khi showAll=true, mặc định 20)'
          example: 20
      responses:
        '200':
          description: 'Lấy dữ liệu thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Phim Việt đặc sắc'}, type: {type: string, example: grid}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
              example:
                status: success
                data:
                  title: 'Phim Việt đặc sắc'
                  type: string
                  movies: [{movieId: 683fb55d88e880e019875aa7, title: 'Mình Yêu Nhau, Bình Yên Thôi', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/minh-yeu-nhau-binh-yen-thoi/medium', movieType: 'Phim bộ', producer: 'SK Pictures, VTV3'}, {movieId: 683e6774602b36157f1c7b18, title: 'Gặp Lại Chị Bầu', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/gap-lai-chi-bau-500/medium', movieType: 'Phim lẻ', producer: 'CJ Entertainment Vietnam'}, {movieId: 683fb6e188e880e019875ac3, title: 'Ngày Xưa Có Một Chuyện Tình', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/ngay-xua-co-cau-chuyen-tinh/medium', movieType: 'Phim lẻ', producer: 'HK Film, Hãng phim Anh Tễu'}]
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Lỗi khi lấy phim Việt'
  /api/home/coming-soon:
    get:
      tags:
        - Home
      summary: 'API Phim sắp chiếu (đặt lịch sẽ phát triển trong tương lai) (Frontend)'
      description: "Lấy danh sách phim sắp chiếu với logic đặc trưng.\n\n**Fontend sử dụng cho:**\n- Section \"Sắp chiếu\"\n- Grid layout phim sắp chiếu\n- Hiển thị poster + thông tin cơ bản\n- Có thể thêm countdown timer đến ngày chiếu\n\n**🔜 FRONTEND \"XEM TẤT CẢ\" BUTTON:**\n```javascript\n// Hiển thị section ban đầu (8 phim sắp chiếu)\nGET /api/home/coming-soon\n\n// Khi user nhấn \"Xem tất cả\" → hiển thị tối đa 20 phim sắp chiếu\nGET /api/home/coming-soon?showAll=true\n```\n"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**🎯 NÚT \"XEM TẤT CẢ\"**\n\n- `false`: Hiển thị section mặc định (8 phim) ⭐ **Dành cho trang chủ**\n- `true`: Hiển thị tối đa 20 phim ⭐ **Dành cho nút \"Xem tất cả\"**\n"
          example: true
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 20
          description: 'Số lượng phim sắp chiếu (chỉ áp dụng khi showAll=true, mặc định 20)'
          example: 20
        -
          name: days
          in: query
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 365
          description: 'Lấy phim sắp chiếu trong X ngày tới (mặc định 30 ngày)'
          example: 15
      responses:
        '200':
          description: 'Lấy dữ liệu thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Sắp chiếu'}, type: {type: string, example: grid}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
              example:
                status: success
                data:
                  title: 'Sắp chiếu'
                  type: string
                  movies: [{movieId: 683fb76c88e880e019875acb, title: 'Avatar: The Way of Water 2', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/avatar-way-of-water-2/medium', movieType: 'Phim lẻ', producer: '20th Century Studios'}, {movieId: 683e922d88e880e019875a1f, title: 'World Cup 2026 Final', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/world-cup-2026/medium', movieType: 'Thể thao', producer: FIFA}]
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Lỗi khi lấy phim sắp chiếu'
  /api/anime:
    get:
      tags:
        - Anime
      summary: '🌸 Lấy tất cả anime (Frontend)'
      description: "**🎯 API TỔNG HỢP ANIME**\n\nLấy danh sách anime với nhiều loại khác nhau\n\n**🔓 Public API** (không cần đăng nhập)"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**👀 XEM TẤT CẢ ANIME**\n\n- `false`: Hiển thị mặc định\n- `true`: Hiển thị tất cả anime"
          example: false
      responses:
        '200':
          description: '✅ Lấy anime thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Tất cả Anime'}, type: {type: string, example: grid}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/anime/series:
    get:
      tags:
        - Anime
      summary: '📺 Lấy anime phim bộ (Frontend)'
      description: "**🎯 API ANIME PHIM BỘ**\n\nLấy danh sách anime dạng series/phim bộ\n\n**🔓 Public API** (không cần đăng nhập)"
      parameters:
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: 'Số trang'
          example: 1
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: 'Số lượng anime mỗi trang'
          example: 10
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**👀 XEM TẤT CẢ ANIME SERIES**"
          example: false
      responses:
        '200':
          description: '✅ Lấy anime series thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/anime/movies:
    get:
      tags:
        - Anime
      summary: '🎬 Lấy anime phim lẻ (Frontend)'
      description: "**🎯 API ANIME PHIM LẺ**\n\nLấy danh sách anime dạng movies/phim lẻ\n\n**🔓 Public API** (không cần đăng nhập)"
      parameters:
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: 'Số trang'
          example: 1
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 13
          description: 'Số lượng anime mỗi trang'
          example: 13
        -
          name: price_type
          in: query
          required: false
          schema:
            type: string
            enum:
              - free
              - paid
          description: 'Filter theo loại giá'
          example: free
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**👀 XEM TẤT CẢ ANIME MOVIES**"
          example: false
      responses:
        '200':
          description: '✅ Lấy anime movies thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/anime/trending:
    get:
      tags:
        - Anime
      summary: '🔥 Lấy anime trending (Frontend)'
      description: "**🎯 API ANIME HOT NHẤT**\n\nLấy danh sách anime đang thịnh hành\n\n**🔓 Public API** (không cần đăng nhập)"
      parameters:
        -
          name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - series
              - movies
              - all
            default: series
          description: 'Loại anime trending'
          example: series
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: 'Số lượng anime trending'
          example: 10
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**👀 XEM TẤT CẢ ANIME TRENDING**"
          example: false
      responses:
        '200':
          description: '✅ Lấy anime trending thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/anime/{id}':
    get:
      tags:
        - Anime
      summary: '📖 Chi tiết anime (Frontend)'
      description: "**🎯 API CHI TIẾT ANIME**\n\nLấy thông tin chi tiết của một anime\n\n**🔓 Public API** (không cần đăng nhập)"
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: 'ID của anime'
          example: 683fb76c88e880e019875aca
      responses:
        '200':
          description: '✅ Lấy chi tiết anime thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {$ref: '#/components/schemas/MovieDetailResponse'}
        '404':
          description: '❌ Không tìm thấy anime'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/anime/categories:
    get:
      tags:
        - Anime
      summary: '📂 Lấy danh mục anime (Frontend)'
      description: "**🎯 API DANH MỤC ANIME**\n\nLấy danh sách các danh mục/thể loại anime\n\n**🔓 Public API** (không cần đăng nhập)"
      responses:
        '200':
          description: '✅ Lấy danh mục anime thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: array, items: {$ref: '#/components/schemas/Genre'}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/anime/banner-anime:
    get:
      tags:
        - Anime
      summary: '🎬 Banner phim hoạt hình (Frontend)'
      description: "**🎯 API BANNER ANIME**\n\nLấy banner và danh sách phim hoạt hình cho màn hình chính\n\n**🔓 Public API** (không cần đăng nhập)"
      parameters:
        - name: bannerLimit
          in: query
          schema:
            type: integer
            default: 5
          description: 'Số phim banner'
        - name: limit
          in: query
          schema:
            type: integer
            default: 6
          description: 'Số phim grid'
        -
          name: days
          in: query
          required: false
          schema:
            type: integer
            default: 30
          description: 'Lấy anime mới trong X ngày'
          example: 30
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**👀 XEM TẤT CẢ BANNER ANIME**"
          example: false
      responses:
        '200':
          description: '✅ Lấy banner anime thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {banner: {type: object, properties: {title: {type: string, example: 'Anime mới ra mắt'}, type: {type: string, example: banner_list}, movies: {type: array, items: {$ref: '#/components/schemas/BannerMovie'}}}}, recommended: {type: object, properties: {title: {type: string, example: 'Anime dành cho bạn'}, type: {type: string, example: grid}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/series/banner-series:
    get:
      tags:
        - Series
      summary: '🎬 API Banner và phim bộ đề xuất cho màn hình Series (Frontend)'
      description: "**🎯 API CHUYÊN DÀNH CHO MÀN HÌNH PHIM BỘ**\n\n**📺 Trả về 2 sections:**\n- ✅ **Banner:** Phim bộ mới ra mắt (slider/banner)\n- ✅ **Grid:** Phim bộ đề xuất dành cho bạn\n\n**🔧 Đặc điểm:**\n- Chỉ lấy phim có `movie_type = \"Phim bộ\"`\n- Filter theo `release_status = \"released\"`\n- Sắp xếp theo ngày tạo mới nhất\n- Tự động format cho frontend FlatList/Grid\n\n**📱 Frontend Usage:**\n```javascript\n// Lấy banner + grid cho màn hình phim bộ\nfetch('/api/series/banner-series')\n\n// Với custom parameters\nfetch('/api/series/banner-series?bannerLimit=3&limit=8&days=15')\n```\n\n**🔓 Public API** (không cần đăng nhập)\n"
      parameters:
        -
          name: bannerLimit
          in: query
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 10
          description: "**🎬 SỐ PHIM TRONG BANNER (Tùy chọn)**\n\nSố lượng phim bộ hiển thị trong banner slider\n- Mặc định: `5` phim ⭐ **Khuyên dùng**\n- Tối đa: `10` phim\n"
          example: 5
        -
          name: showAll
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "**🎯 NÚT \"XEM TẤT CẢ\"**\n\n- `false`: Hiển thị section mặc định (6 phim bộ) ⭐ **Dành cho trang chủ**\n- `true`: Hiển thị tối đa 20 phim bộ ⭐ **Dành cho nút \"Xem tất cả\"**\n"
          example: true
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 6
            minimum: 1
            maximum: 20
          description: "**📊 SỐ PHIM TRONG GRID (Tùy chọn)**\n\nSố lượng phim bộ trong section \"Phim bộ dành cho bạn\"\n- Mặc định: `6` phim ⭐ **Khuyên dùng**\n- Tối đa: `20` phim (khi showAll=true)\n"
          example: 6
        -
          name: days
          in: query
          required: false
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 365
          description: "**📅 LỌOC PHIM BỘ MỚI (Tùy chọn)**\n\nLấy phim bộ mới trong X ngày gần đây\n- Mặc định: `30` ngày ⭐ **Khuyên dùng**\n- Tối đa: `365` ngày\n"
          example: 30
      responses:
        '200':
          description: '✅ Lấy banner và phim bộ đề xuất thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {banner: {type: object, properties: {title: {type: string, example: 'Phim bộ mới ra mắt'}, type: {type: string, example: banner_list}, movies: {type: array, items: {$ref: '#/components/schemas/BannerMovie'}}}}, recommended: {type: object, properties: {title: {type: string, example: 'Phim bộ dành cho bạn'}, type: {type: string, example: grid}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}}}
              example:
                status: success
                data:
                  banner: {title: 'Phim bộ mới ra mắt', type: string, movies: [{movieId: 683fb76c88e880e019875aca, title: '1000 Years Old', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/phimbo-1000-years-old/medium', description: 'Bộ phim tình cảm đặc sắc từ Thái Lan với câu chuyện tình yêu vượt thời gian...', releaseYear: 2024, movieType: 'Phim bộ', producer: 'WeTV Thailand', genres: ['Tình cảm', Drama]}]}
                  recommended: {title: 'Phim bộ dành cho bạn', type: string, movies: [{movieId: 683fb76c88e880e019875aca, title: '1000 Years Old', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/phimbo-1000-years-old/medium', movieType: 'Phim bộ', producer: 'WeTV Thailand'}]}
        '500':
          description: '❌ Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Lỗi khi lấy banner phim bộ'
  /api/series/trending:
    get:
      tags:
        - Series
      summary: '🔥 API Phim bộ đang thịnh hành (Frontend)'
      description: "**🎯 API PHIM BỘ HOT NHẤT**\n\n**🔥 Đặc điểm:**\n- Chỉ lấy phim có `movie_type = \"Phim bộ\"`\n- Sắp xếp theo lượt xem (view_count) cao nhất\n- Hỗ trợ xem tất cả với `showAll=true`\n- Tự động tính toán rating và stats\n\n**📱 Frontend Usage:**\n```javascript\n// Lấy 8 phim bộ hot nhất\nfetch('/api/series/trending')\n\n// Xem tất cả phim bộ thịnh hành\nfetch('/api/series/trending?showAll=true')\n```\n\n**🔓 Public API** (không cần đăng nhập)\n"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
          description: "**👀 XEM TẤT CẢ (Tùy chọn)**\n\n- `true`: Xem tất cả phim bộ thịnh hành (pagination)\n- `false` hoặc không truyền: Chỉ 8 phim top\n\n💡 **Tip:** Dùng cho trang \"Xem tất cả\"\n"
          example: 'false'
      responses:
        '200':
          description: '✅ Lấy phim bộ thịnh hành thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Phim bộ đang thịnh hành'}, type: {type: string, example: grid}, showAll: {type: boolean, example: false}, total: {type: integer, example: 8}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
              examples:
                default_view:
                  summary: 'Xem mặc định (8 phim bộ top)'
                  value: {status: success, data: {title: 'Phim bộ đang thịnh hành', type: string, showAll: false, total: 8, movies: [{movieId: 683fb76c88e880e019875aca, title: '1000 Years Old', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/phimbo-1000-years-old/medium', movieType: 'Phim bộ', producer: 'WeTV Thailand'}]}}
                show_all_view:
                  summary: 'Xem tất cả phim bộ thịnh hành'
                  value: {status: success, data: {title: 'Tất cả phim bộ thịnh hành', type: string, showAll: true, total: 45, movies: [{movieId: 683fb76c88e880e019875aca, title: '1000 Years Old', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/phimbo-1000-years-old/medium', movieType: 'Phim bộ', producer: 'WeTV Thailand'}]}}
  /api/series/vietnamese:
    get:
      tags:
        - Series
      summary: '🇻🇳 API Phim bộ Việt Nam (Frontend)'
      description: "**🎯 API PHIM BỘ VIỆT NAM ĐẶC SẮC**\n\n**🇻🇳 Đặc điểm:**\n- Chỉ lấy phim có `movie_type = \"Phim bộ\"`\n- Filter producer chứa \"Việt Nam\" hoặc \"Vietnam\"\n- Sắp xếp theo đánh giá và lượt xem\n- Hỗ trợ xem tất cả với `showAll=true`\n\n**📱 Frontend Usage:**\n```javascript\n// Lấy 8 phim bộ Việt hot nhất\nfetch('/api/series/vietnamese')\n\n// Xem tất cả phim bộ Việt\nfetch('/api/series/vietnamese?showAll=true')\n```\n\n**🔓 Public API** (không cần đăng nhập)\n"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
          description: "**👀 XEM TẤT CẢ PHIM BỘ VIỆT (Tùy chọn)**\n\n- `true`: Xem tất cả phim bộ Việt Nam\n- `false` hoặc không truyền: Chỉ 8 phim top\n"
          example: 'false'
      responses:
        '200':
          description: '✅ Lấy phim bộ Việt Nam thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Phim bộ Việt đặc sắc'}, type: {type: string, example: grid}, showAll: {type: boolean, example: false}, total: {type: integer, example: 8}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
  /api/series/anime:
    get:
      tags:
        - Series
      summary: '🎌 API Phim bộ Anime/Hoạt hình (Frontend)'
      description: "**🎯 API ANIME SERIES HOT**\n\n**🎌 Đặc điểm:**\n- Chỉ lấy phim có `movie_type = \"Phim bộ\"`\n- Filter theo thể loại \"Hoạt hình\" hoặc producer anime\n- Sắp xếp theo popularity và rating\n- Hỗ trợ xem tất cả với `showAll=true`\n\n**📱 Frontend Usage:**\n```javascript\n// Lấy 8 anime series hot nhất\nfetch('/api/series/anime')\n\n// Xem tất cả anime series\nfetch('/api/series/anime?showAll=true')\n```\n\n**🔓 Public API** (không cần đăng nhập)\n"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
          description: "**👀 XEM TẤT CẢ ANIME SERIES (Tùy chọn)**\n\n- `true`: Xem tất cả anime/hoạt hình bộ\n- `false` hoặc không truyền: Chỉ 8 series top\n"
          example: 'false'
      responses:
        '200':
          description: '✅ Lấy anime series thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'Anime series hot'}, type: {type: string, example: grid}, showAll: {type: boolean, example: false}, total: {type: integer, example: 8}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
  /api/series/korean:
    get:
      tags:
        - Series
      summary: '🇰🇷 API Phim bộ Hàn Quốc (K-Drama) (Frontend)'
      description: "**🎯 API K-DRAMA HOT NHẤT**\n\n**🇰🇷 Đặc điểm:**\n- Chỉ lấy phim có `movie_type = \"Phim bộ\"`\n- Filter producer chứa \"Hàn Quốc\", \"Korea\", \"KBS\", \"SBS\", \"MBC\"\n- Sắp xếp theo popularity và rating\n- Hỗ trợ xem tất cả với `showAll=true`\n\n**📱 Frontend Usage:**\n```javascript\n// Lấy 8 K-drama hot nhất\nfetch('/api/series/korean')\n\n// Xem tất cả K-drama\nfetch('/api/series/korean?showAll=true')\n```\n\n**🔓 Public API** (không cần đăng nhập)\n"
      parameters:
        -
          name: showAll
          in: query
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
          description: "**👀 XEM TẤT CẢ K-DRAMA (Tùy chọn)**\n\n- `true`: Xem tất cả phim bộ Hàn Quốc\n- `false` hoặc không truyền: Chỉ 8 phim top\n"
          example: 'false'
      responses:
        '200':
          description: '✅ Lấy K-drama thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {title: {type: string, example: 'K-Drama hot nhất'}, type: {type: string, example: grid}, showAll: {type: boolean, example: false}, total: {type: integer, example: 8}, movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}}}
              example:
                status: success
                data:
                  title: 'K-Drama hot nhất'
                  type: string
                  showAll: false
                  total: 8
                  movies: [{movieId: 683fb123456789abcdef1234, title: 'Hometown''s Embrace', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/hometown-embrace/medium', movieType: 'Phim bộ', producer: 'KBS Drama'}]
  '/api/series/{id}':
    get:
      tags:
        - Series
      summary: '📖 Chi tiết phim bộ (Frontend)'
      description: "**🎯 API CHI TIẾT PHIM BỘ**\n\nLấy thông tin chi tiết của một phim bộ\n\n**🔓 Public API** (không cần đăng nhập)\n\n**🎬 Use Cases:**\n- Màn hình chi tiết phim bộ\n- Thông tin episodes\n- Cast & crew info"
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: 'ID của phim bộ'
          example: 683fb76c88e880e019875aca
      responses:
        '200':
          description: '✅ Lấy chi tiết phim bộ thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {$ref: '#/components/schemas/MovieDetailResponse'}
        '404':
          description: '❌ Không tìm thấy phim bộ'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/movies/{id}/detail-with-interactions':
    get:
      tags:
        - Movie
      summary: '🎬 API Chi tiết phim tổng hợp cho màn hình detail [CHÍNH THỨC] (Frontend)'
      description: "**🎯 Mục đích:** API tổng hợp mọi thông tin cần thiết cho màn hình chi tiết phim.\n\n**🚀 API CHÍNH THỨC DUY NHẤT:** Đây là API CHÍNH THỨC và DUY NHẤT cho màn hình chi tiết phim.\n\n**❌ ĐÃ XÓA API CŨ:** `/api/users/{userId}/interactions/movie/{movieId}` (trùng lặp)\n**✅ SỬ DỤNG API NÀY:** Tất cả dữ liệu user interactions đã được tích hợp vào đây.\n\n**🌟 Đặc điểm:**\n- ✅ API hybrid: Public (không cần userId) hoặc Protected (có userId)\n- ✅ Không có userId: Chỉ thông tin phim + stats + comments\n- ✅ Có userId: Thêm user interactions (like, favorite, watching progress)\n- ✅ Trả về cấu hình tabs cho UI (Danh sách/Liên quan)\n- ✅ Thông tin khác nhau cho phim lẻ vs phim bộ\n\n**💡 Use Cases:**\n- Màn hình chi tiết phim (user chưa đăng nhập)\n- Màn hình chi tiết phim (user đã đăng nhập) - có trạng thái tương tác\n- UI render tabs dựa vào `tabs` config\n\n**🔄 THAY ĐỔI:** Sử dụng userId thay vì Authorization header\n"
      parameters:
        -
          name: id
          in: query
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
          description: 'ID của phim (ObjectId)'
        -
          name: userId
          in: query
          schema:
            type: string
          example: 683d7b63d0ee4aeb15a11369
          description: 'ID của user (tùy chọn) - có userId thì trả về user interactions'
      responses:
        '200':
          description: '✅ Lấy chi tiết phim thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {$ref: '#/components/schemas/MovieDetailResponse'}
              examples:
                phim_bo_with_user:
                  summary: 'Phim bộ - Có userId (đăng nhập)'
                  value: {status: success, data: {movie: {_id: 675a1234567890abcdef1234, movie_title: 'Hồ Sơ Trinh Sát II - Tập 1', description: 'Bộ phim trinh thám Hong Kong nổi tiếng...', production_time: '1995-12-15T00:00:00.000Z', producer: 'TVB Hong Kong', poster_path: 'https://example.com/poster.jpg', genres: [{_id: genre1, genre_name: 'Trinh thám', description: 'Phim trinh thám'}], movie_type: 'Phim bộ', price: 0, is_free: true, price_display: 'Miễn phí', episodes: [{_id: ep1, episode_number: 1, episode_title: 'Tập 1', episode_description: 'Tập mở đầu', duration: 45, uri: 'https://cdn.example.com/episode1.m3u8', is_locked: false}]}, stats: {views: 15420, viewsFormatted: 15.4K, likes: 892, rating: 4.6, totalRatings: 1250, comments: 156}, recentComments: [{_id: comment1, user: {name: 'Bình Luận', email: user@example.com}, comment: '2 sép nên độc thân là ok nhất', isLike: true, createdAt: '2024-12-11T12:00:00.000Z'}], userInteractions: {hasLiked: true, hasRated: true, userComment: 'Phim hay quá!', isFavorite: true, isFollowing: true, watchingProgress: {episodeNumber: 1, watchPercentage: 75.5, currentTime: 2040, lastWatched: '2024-12-11T10:30:00.000Z'}}, relatedMovies: [{movieId: 675a1234567890abcdef5678, title: 'Hồ Sơ Trinh Sát I', poster: 'https://example.com/related1.jpg', movieType: 'Phim bộ', producer: 'TVB Hong Kong'}], tabs: {showEpisodesList: true, showRelated: true}}}
                phim_le_no_user:
                  summary: 'Phim lẻ - Không có userId (chưa đăng nhập)'
                  value: {status: success, data: {movie: {_id: 675a1234567890abcdef9999, movie_title: 'Spider-Man: No Way Home', description: 'Bộ phim siêu anh hùng...', production_time: '2021-12-15T00:00:00.000Z', producer: 'Sony Pictures', poster_path: 'https://example.com/spiderman.jpg', genres: [{_id: genre2, genre_name: 'Hành động', description: 'Phim hành động'}], movie_type: 'Phim lẻ', price: 50000, is_free: false, price_display: '50,000 VNĐ', uri: null, duration: 148, is_locked: true}, stats: {views: 125340, viewsFormatted: 125K, likes: 8934, rating: 4.8, totalRatings: 12450, comments: 2156}, recentComments: [], userInteractions: null, relatedMovies: [], tabs: {showEpisodesList: false, showRelated: true}}}
        '404':
          description: '❌ Không tìm thấy phim'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Không tìm thấy phim'
        '500':
          description: '❌ Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Lỗi khi lấy chi tiết phim'
  /api/genres:
    get:
      tags:
        - Genre
      summary: 'Lấy danh sách thể loại (Frontend/Admin)'
      description: "Lấy danh sách thể loại với nhiều options.\n\n**Query Parameters:**\n- `type`: Loại thể loại cần lấy ('all' | 'parent' | 'active' | 'children', mặc định: 'all')\n- `parent_id`: ID thể loại cha (chỉ dùng khi type='children')\n\n**Lưu ý:**\n- Luôn trả về poster (include_poster=true)\n- Luôn trả về dạng cây (format=tree)\n\n**Ví dụ:**\n1. Lấy tất cả thể loại:\n   GET /api/genres\n2. Lấy thể loại cha:\n   GET /api/genres?type=parent\n3. Lấy thể loại con của một thể loại cha:\n   GET /api/genres?type=children&parent_id=123\n"
      parameters:
        -
          in: query
          name: type
          schema:
            type: string
            enum:
              - all
              - parent
              - active
              - children
            default: all
          description: 'Loại thể loại cần lấy'
        -
          in: query
          name: parent_id
          schema:
            type: string
          description: 'ID thể loại cha (chỉ dùng khi type=''children'')'
      responses:
        '200':
          description: 'Thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {genres: {type: array, items: {$ref: '#/components/schemas/Genre'}}, total: {type: integer, example: 10}, type: {type: string, example: all}, format: {type: string, example: tree}}}
        '404':
          description: 'Không tìm thấy thể loại'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/genres/{id}/movies':
    get:
      tags:
        - Genre
      summary: 'Lấy danh sách phim theo thể loại (Frontend)'
      description: "Lấy danh sách phim thuộc một thể loại cụ thể.\n\n**Đặc điểm:**\n- Public API (không cần đăng nhập)\n- Hỗ trợ phân trang\n- Sắp xếp theo ngày tạo mới nhất\n- Có thể include phim con (phim bộ)\n\n**🔥 Lưu ý quan trọng:**\n- ID thể loại được truyền qua path parameter, KHÔNG phải query parameter\n- Ví dụ đúng: `/api/genres/6847d080101e640d01a0c37f/movies`\n- Ví dụ sai: `/api/genres/{id}/movies?id=6847d080101e640d01a0c37f`\n"
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          example: 6847d080101e640d01a0c37f
          description: 'ID của thể loại cần lấy danh sách phim (truyền trực tiếp vào URL path)'
        -
          name: include_children
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: 'Có lấy thêm phim con (phim bộ) hay không'
          example: false
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: 'Số trang (mặc định 1)'
          example: 1
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
          description: 'Số lượng phim mỗi trang (mặc định 10)'
          example: 10
        -
          name: sort
          in: query
          required: false
          schema:
            type: string
            default: '-createdAt'
          description: 'Sắp xếp theo trường (prefix - để sắp xếp giảm dần)'
          example: '-createdAt'
      responses:
        '200':
          description: 'Lấy dữ liệu thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {movies: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}, pagination: {type: object, properties: {total: {type: integer, example: 100}, page: {type: integer, example: 1}, limit: {type: integer, example: 10}, pages: {type: integer, example: 10}}}}}
              example:
                status: success
                data:
                  movies: [{_id: 6847d080101e640d01a0c37f, title: 'Spider-Man: No Way Home', description: 'Peter Parker seeks help from Doctor Strange...', poster: 'https://example.com/spiderman.jpg', backdrop: 'https://example.com/spiderman-backdrop.jpg', release_date: '2021-12-17', movie_type: 'Phim lẻ', duration: 148, genres: ['Hành động', 'Phiêu lưu'], rating: 4.5, total_ratings: 1000}]
                  pagination: {total: 100, page: 1, limit: 10, pages: 10}
        '400':
          description: 'ID thể loại không hợp lệ'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'ID thể loại không hợp lệ'
        '404':
          description: 'Không tìm thấy thể loại'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Không tìm thấy thể loại'
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/api/ratings/movies/{movie_id}/like':
    put:
      tags:
        - 'Movie Interactions'
      summary: '⚡ Toggle Thích/Bỏ thích phim (UNIFIED) (Frontend)'
      description: "**🆕 API MỚI - RESTful Toggle Approach**\n\n**🎯 Mục đích:** Toggle trạng thái like/unlike phim trong 1 API duy nhất.\n\n**✅ Ưu điểm:**\n- Giảm duplicate code từ 2 APIs xuống 1 API\n- RESTful và semantic hơn (PUT cho update)\n- Dễ implement ở frontend (1 function thay vì 2)\n- Response nhất quán cho cả like và unlike\n\n**💡 Cách dùng:**\n```javascript\n// Like phim\nPUT /api/ratings/movies/{movie_id}/like\n{ \"isLike\": true, \"userId\": \"xxx\" }\n\n// Unlike phim  \nPUT /api/ratings/movies/{movie_id}/like\n{ \"isLike\": false, \"userId\": \"xxx\" }\n```\n"
      parameters:
        -
          name: movie_id
          in: query
          required: true

          schema:
            type: string
          example: 675a1234567890abcdef1234
          description: 'ID của phim'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - isLike
              properties:
                userId:
                  type: string
                  example: 683d7b63d0ee4aeb15a11369
                  description: 'ID của user thực hiện thao tác'
                isLike:
                  type: boolean
                  example: true
                  description: 'true = thích phim, false = bỏ thích phim'
      responses:
        '200':
          description: '✅ Toggle like/unlike thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'Đã thích phim'}
                  data: {type: object, properties: {movieId: {type: string, example: 675a1234567890abcdef1234}, isLike: {type: boolean, example: true, description: 'Trạng thái hiện tại'}, likeCount: {type: integer, example: 893, description: 'Tổng số like của phim'}, userRating: {type: object, nullable: true, description: 'Thông tin rating của user (null nếu đã unlike hoàn toàn)', properties: {_id: {type: string}, isLike: {type: boolean}, hasComment: {type: boolean}, createdAt: {type: string, format: date-time}, updatedAt: {type: string, format: date-time}}}}}
        '400':
          description: '❌ Lỗi validate request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: '❌ Không tìm thấy phim'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/ratings/movies/{movie_id}/like-legacy':
    post:
      tags:
        - 'Movie Interactions'
      summary: '❤️ Thích phim (LEGACY) (Frontend)'
      description: "**⚠️ LEGACY API - Sử dụng API PUT mới được khuyến nghị**\n\n**🎯 Mục đích:** User thích một bộ phim.\n\n**🔄 THAY ĐỔI:** Sử dụng userId trong body thay vì Authorization header\n"
      parameters:
        -
          name: movie_id
          in: query
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
          description: 'ID của phim'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  example: 683d7b63d0ee4aeb15a11369
                  description: 'ID của user thực hiện thao tác'
      responses:
        '200':
          description: '✅ Thích phim thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'Đã thích phim thành công'}
                  data: {type: object, properties: {movieId: {type: string, example: 675a1234567890abcdef1234}, likeCount: {type: integer, example: 893}, rating: {type: number, format: float, example: 4.6}}}
        '404':
          description: '❌ Không tìm thấy phim'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/ratings/movies/{movie_id}/unlike':
    post:
      tags:
        - 'Movie Interactions'
      summary: '💔 Bỏ thích phim (Frontend)'
      description: "**🎯 Mục đích:** User bỏ thích một bộ phim.\n\n**🔄 THAY ĐỔI:** Sử dụng userId trong body thay vì Authorization header\n"
      parameters:
        -
          name: movie_id
          in: query             
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
          description: 'ID của phim'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  example: 683d7b63d0ee4aeb15a11369
                  description: 'ID của user thực hiện thao tác'
      responses:
        '200':
          description: '✅ Bỏ thích phim thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'Đã bỏ thích phim thành công'}
                  data: {type: object, properties: {movieId: {type: string, example: 675a1234567890abcdef1234}, likeCount: {type: integer, example: 891}, rating: {type: number, format: float, example: 4.5}}}
  '/api/ratings/movies/{movie_id}/comment':
    post:
      tags:
        - 'Movie Interactions'
      summary: '💬 Thêm bình luận phim (Frontend)'
      description: "**🎯 Mục đích:** User thêm bình luận cho một bộ phim.\n\n**🔄 THAY ĐỔI:** Sử dụng userId trong body thay vì Authorization header\n"
      parameters:
        -
          name: movie_id
          in: query
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
          description: 'ID của phim'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - comment
              properties:
                userId:
                  type: string
                  example: 683d7b63d0ee4aeb15a11369
                  description: 'ID của user thực hiện thao tác'
                comment:
                  type: string
                  example: 'Phim hay quá! Diễn viên diễn rất tự nhiên.'
                  description: 'Nội dung bình luận'
      responses:
        '200':
          description: '✅ Thêm bình luận thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'Đã thêm bình luận thành công'}
                  data: {type: object, properties: {movieId: {type: string, example: 675a1234567890abcdef1234}, comment: {type: object, properties: {id: {type: string, example: rating123}, comment: {type: string, example: 'Phim hay quá! Diễn viên diễn rất tự nhiên.'}, user: {$ref: '#/components/schemas/UserInfo'}, createdAt: {type: string, format: date-time, example: '2024-12-11T12:00:00.000Z'}}}}}
        '400':
          description: '❌ Bình luận không được để trống'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/favorites/movies/{movie_id}/add':
    post:
      tags:
        - 'Movie Interactions'
      summary: '⭐ Thêm vào danh sách yêu thích (Frontend)'
      description: "**🎯 Mục đích:** User thêm phim vào danh sách yêu thích.\n\n**🔄 THAY ĐỔI:** Sử dụng userId trong body thay vì Authorization header\n"
      parameters:
        -
          name: movie_id
          in: query
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
          description: 'ID của phim'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  example: 683d7b63d0ee4aeb15a11369
                  description: 'ID của user thực hiện thao tác'
      responses:
        '200':
          description: '✅ Thêm vào yêu thích thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'Đã thêm vào danh sách yêu thích'}
  '/api/favorites/movies/{movie_id}/remove':
    post:
      tags:
        - 'Movie Interactions'
      summary: '❌ Xóa khỏi danh sách yêu thích (Frontend)'
      description: "**🎯 Mục đích:** User xóa phim khỏi danh sách yêu thích.\n\n**🔄 THAY ĐỔI:** Sử dụng userId trong body thay vì Authorization header\n"
      parameters:
        -
          name: movie_id
          in: query
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
          description: 'ID của phim'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  example: 683d7b63d0ee4aeb15a11369
                  description: 'ID của user thực hiện thao tác'
      responses:
        '200':
          description: '✅ Xóa khỏi yêu thích thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'Đã xóa khỏi danh sách yêu thích'}
  /api/movies/search:
    get:
      tags:
        - Movie
      summary: '🔍 Tìm kiếm phim đơn giản theo tên và mô tả (Frontend)'
      description: "**🎯 API TÌM KIẾM PHIM ĐƠN GIẢN**\n\n**📚 CÁCH DÙNG ĐỚN GIẢN NHẤT:**\n```javascript\n// 1. Tìm tất cả phim (không cần tham số)\nGET /api/movies/search\n\n// 2. Tìm theo từ khóa trong tên và mô tả\nGET /api/movies/search?tuKhoa=avatar\n\n// 3. Lấy thêm phim (pagination)\nGET /api/movies/search?page=2&limit=20\n```\n\n**🔧 TÍNH NĂNG:**\n- ✅ **Tìm kiếm đơn giản:** CHỈ trong tên phim và mô tả\n- ✅ **Pagination tự động:** hỗ trợ infinite scroll\n- ✅ **Response tối ưu:** poster, stats, pricing info\n- ✅ **Sắp xếp mặc định:** theo ngày tạo mới nhất\n\n**📱 FRONTEND EXAMPLES:**\n```javascript\n// Tìm kiếm cơ bản\nfetch('/api/movies/search?tuKhoa=batman')\n\n// Load more cho FlatList\nfetch('/api/movies/search?tuKhoa=batman&page=2&limit=20')\n\n// Lấy tất cả phim\nfetch('/api/movies/search?page=1&limit=20')\n```\n\n**🎯 PERFECT FOR:**\n- Search screens với FlatList/Grid\n- Simple movie search\n- Infinite scroll implementation\n\n**🔓 Public API** (không cần đăng nhập)\n"
      parameters:
        -
          name: tuKhoa
          in: query
          required: false
          schema:
            type: string
          description: "**🔤 TỪ KHÓA TÌM KIẾM (Tùy chọn)**\n\nTìm kiếm đơn giản chỉ trong:\n- 🎬 Tên phim \n- 📝 Mô tả phim\n\n💡 **Tips:** Không phân biệt hoa thường, có thể tìm tiếng Việt có dấu\n"
          example: batman
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: "**📄 TRANG HIỆN TẠI (Tùy chọn)**\n\nDùng cho infinite scroll trong FlatList\n- Trang đầu: `1` (mặc định)\n- Load more: `2`, `3`, `4`...\n"
          example: 1
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: "**📊 SỐ PHIM MỖI TRANG (Tùy chọn)**\n\n- Mặc định: `20` phim ⭐ **Khuyên dùng**\n- Tối thiểu: `1` phim\n- Tối đa: `100` phim\n\n💡 **FlatList tip:** Dùng 20 cho performance tốt\n"
          example: 20
      responses:
        '200':
          description: '✅ Tìm kiếm phim thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {movies: {type: array, items: {$ref: '#/components/schemas/SearchMovieResult'}}, pagination: {$ref: '#/components/schemas/PaginationInfo'}, search_info: {$ref: '#/components/schemas/SearchInfo'}}}
              examples:
                basic_search:
                  summary: 'Tìm kiếm cơ bản với pagination'
                  value: {status: success, data: {movies: [{movieId: 683fb76c88e880e019875aca, title: '1000 Years Old', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/phimbo-1000-years-old/medium', movieType: 'Phim bộ', producer: 'WeTV Thailand', description: 'Bộ phim tình cảm đặc sắc từ Thái Lan với câu chuyện tình yêu vượt thời gian...', releaseYear: 2024, price: 0, is_free: true, price_display: 'Miễn phí', view_count: 15420, favorite_count: 892, rating: 4.6, total_ratings: 1250, total_episodes: 12, genres: ['Tình cảm', Drama]}, {movieId: 683fb76c88e880e019875acb, title: 'Avatar: The Way of Water 2', poster: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/avatar-way-of-water-2/medium', movieType: 'Phim lẻ', producer: '20th Century Studios', description: 'Phần tiếp theo đầy màu sắc của bom tấn Avatar với những cảnh quay dưới nước...', releaseYear: 2025, price: 50000, is_free: false, price_display: '50,000 VNĐ', view_count: 89342, favorite_count: 5234, rating: 4.8, total_ratings: 8934, total_episodes: 1, genres: ['Hành động', 'Khoa học viễn tưởng', 'Phiêu lưu']}], pagination: {current_page: 1, total_pages: 5, total_items: 89, items_per_page: 20, has_next: true, has_prev: false}, search_info: {keyword: avatar, search_in: [movie_title, description], total_found: 89}}}
                simple_search:
                  summary: 'Tìm kiếm đơn giản'
                  value: {status: success, data: {movies: [{movieId: 683fb76c88e880e019875acc, title: Inception, poster: 'https://example.com/inception.jpg', movieType: 'Phim lẻ', producer: 'Warner Bros', description: 'Bộ phim khoa học viễn tưởng về giấc mơ và thực tại đan xen...', releaseYear: 2010, price: 0, is_free: true, price_display: 'Miễn phí', view_count: 234567, favorite_count: 12345, rating: 4.9, total_ratings: 15678, total_episodes: 1, genres: ['Khoa học viễn tưởng', 'Hành động']}], pagination: {current_page: 2, total_pages: 3, total_items: 42, items_per_page: 20, has_next: true, has_prev: true}, search_info: {keyword: dream, search_in: [movie_title, description], total_found: 42}}}
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: error
                message: 'Lỗi server khi tìm kiếm phim'
  '/api/movies/{id}/stats':
    get:
      tags:
        - Movie
      summary: '📊 Lấy thống kê phim (Frontend)'
      description: "**🎯 API THỐNG KÊ PHIM**\n\nLấy các số liệu thống kê của phim (like, view, rating)\n\n**🔓 Public API** (không cần đăng nhập)"
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: 'ID của phim'
          example: 675a1234567890abcdef1234
      responses:
        '200':
          description: '✅ Lấy thống kê phim thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {likeCount: {type: integer, example: 892}, viewCount: {type: integer, example: 15420}, averageRating: {type: number, format: float, example: 4.6}, totalRating: {type: integer, example: 1250}}}
        '404':
          description: '❌ Không tìm thấy phim'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/movies/{id}/related':
    get:
      tags:
        - Movie
      summary: '🔗 Lấy phim liên quan (Frontend)'
      description: "**🎯 API PHIM LIÊN QUAN**\n\nLấy danh sách phim liên quan dựa theo thể loại, diễn viên, đạo diễn\n\n**🔓 Public API** (không cần đăng nhập)"
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
          description: 'ID của phim gốc'
          example: 675a1234567890abcdef1234
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 5
            minimum: 1
            maximum: 20
          description: 'Số lượng phim liên quan'
          example: 5
      responses:
        '200':
          description: '✅ Lấy phim liên quan thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: array, items: {$ref: '#/components/schemas/GridMovie'}}
        '404':
          description: '❌ Không tìm thấy phim'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/ratings/movies/{movieId}/comments':
    get:
      tags:
        - 'Movie Interactions'
      summary: '💬 Lấy danh sách bình luận phim (Frontend)'
      description: "**🎯 API DANH SÁCH BÌNH LUẬN**\n\nLấy danh sách bình luận của phim với pagination\n\n**🔓 Public API** (không cần đăng nhập)"
      parameters:
        -
          name: movieId
          in: path
          required: true
          schema:
            type: string
          description: 'ID của phim'
          example: 675a1234567890abcdef1234
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: 'Số trang'
          example: 1
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
          description: 'Số bình luận mỗi trang'
          example: 10
      responses:
        '200':
          description: '✅ Lấy bình luận thành công'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {comments: {type: array, items: {type: object, properties: {_id: {type: string}, user: {type: object, properties: {name: {type: string}, email: {type: string}, avatar: {type: string}}}, comment: {type: string}, isLike: {type: boolean}, createdAt: {type: string, format: date-time}}}}, pagination: {type: object, properties: {page: {type: integer}, limit: {type: integer}, total: {type: integer}, hasMore: {type: boolean}}}}}
        '404':
          description: '❌ Không tìm thấy phim'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Lỗi server'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/video-url/{videoId}':
    get:
      tags:
        - 'Video Player'
      summary: '🎬 API chính lấy Stream URL cho Expo Video Player (Frontend)'
      operationId: getVideoStreamUrl
      description: "**🎯 API QUAN TRỌNG NHẤT CHO VIDEO PLAYER**\n\nLấy Cloudflare Stream URLs để phát video trong Expo app.\n"
      parameters:
        -
          name: videoId
          in: query
          required: true
          schema:
            type: string
          description: 'Episode ID hoặc Movie ID'
          example: 675a1234567890abcdef1234
        -
          name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - auto
              - episode
              - movie
            default: auto
          description: 'Loại tìm kiếm (tự động detect)'
        -
          name: quality
          in: query
          required: false
          schema:
            type: string
            enum:
              - auto
              - 360p
              - 480p
              - 720p
            default: auto
          description: 'Chất lượng video'
      responses:
        '200':
          description: 'Lấy stream URLs thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoStreamResponse'
        '202':
          description: 'Video đang được xử lý'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 'Video yêu cầu thanh toán'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Video không tồn tại'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/video-url/{videoId}/refresh':
    post:
      tags:
        - 'Video Streaming'
      summary: '🔄 Refresh Stream URL (Frontend)'
      operationId: refreshVideoStreamUrl
      description: 'Làm mới Stream URL với thời gian hết hạn mới'
      parameters:
        -
          name: videoId
          in: query
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
      responses:
        '200':
          description: 'URL đã được làm mới'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoStreamResponse'
        '404':
          description: 'Video không tồn tại'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/video-url/{videoId}/status':
    get:
      tags:
        - 'Video Streaming'
      summary: '📊 Check Video Status (Frontend/Admin)'
      operationId: getVideoStatus
      description: 'Kiểm tra trạng thái video và khả năng truy cập'
      parameters:
        -
          name: videoId
          in: query
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
      responses:
        '200':
          description: 'Thông tin trạng thái video'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {videoId: {type: string}, streamUid: {type: string}, available: {type: boolean}, accessible: {type: boolean}, message: {type: string}}}
        '404':
          description: 'Video không tồn tại'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  '/api/watching/progress/{episodeId}':
    get:
      tags:
        - 'Video Player'
      summary: '📊 API lấy tiến độ xem đã lưu (Frontend)'
      operationId: getWatchingProgress
      description: 'Lấy tiến độ xem đã lưu để resume video từ vị trí đã xem'
      parameters:
        -
          name: episodeId
          in: path
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
        -
          name: userId
          in: query
          required: true
          schema:
            type: string
          description: 'User ID để lấy progress cá nhân'
          example: 675a1234567890abcdef1234
      responses:
        '200':
          description: 'Tiến độ xem đã lưu'
          content:
            application/json:
              schema:
                type: object
                properties:
                  episode_id: {type: string}
                  current_time: {type: number, example: 1250, description: 'Vị trí đã xem (giây)'}
                  duration: {type: number, example: 1800}
                  completed: {type: boolean, example: false}
                  watch_percentage: {type: number, example: 69.4}
                  last_watched: {type: string, format: date-time}
        '404':
          description: 'Không tìm thấy progress'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - 'Video Player'
      summary: '💾 API cập nhật tiến độ xem (Frontend)'
      operationId: updateWatchingProgress
      description: 'Cập nhật tiến độ xem hiện tại của user'
      parameters:
        -
          name: episodeId
          in: path
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - currentTime
                - duration
              properties:
                userId:
                  type: string
                  description: 'User ID'
                currentTime:
                  type: number
                  description: 'Vị trí hiện tại (giây)'
                duration:
                  type: number
                  description: 'Tổng thời lượng video (giây)'
                completed:
                  type: boolean
                  description: 'Đã xem xong hay chưa'
      responses:
        '200':
          description: 'Cập nhật progress thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 'Dữ liệu không hợp lệ'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - 'Video Player'
      summary: '💾 API lưu tiến độ xem (Frontend)'
      operationId: saveWatchingProgress
      description: 'Lưu tiến độ xem hiện tại của user để có thể resume sau'
      parameters:
        -
          name: episodeId
          in: query
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - currentTime
                - duration
              properties:
                userId:
                  type: string
                  description: 'User ID'
                currentTime:
                  type: number
                  description: 'Vị trí hiện tại (giây)'
                duration:
                  type: number
                  description: 'Tổng thời lượng video (giây)'
                completed:
                  type: boolean
                  description: 'Đã xem xong hay chưa'
      responses:
        '200':
          description: 'Lưu progress thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: 'Dữ liệu không hợp lệ'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/watching/history:
    get:
      tags:
        - 'Video Player'
      summary: '📺 Lấy lịch sử xem phim (Frontend)'
      operationId: getWatchingHistory
      description: 'Lấy danh sách phim/episode user đã xem gần đây'
      parameters:
        -
          name: userId
          in: query
          required: true
          schema:
            type: string
          description: 'User ID'
          example: 675a1234567890abcdef1234
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
          description: 'Số lượng items tối đa'
      responses:
        '200':
          description: 'Lịch sử xem phim'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: array, items: {type: object, properties: {episode_id: {type: string}, movie: {type: object}, episode: {type: object}, current_time: {type: number}, duration: {type: number}, watch_percentage: {type: number}, last_watched: {type: string, format: date-time}}}}
        '400':
          description: 'UserId không hợp lệ'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/episodes/{id}':
    get:
      tags:
        - Episode
      summary: '📺 Chi tiết Episode (Frontend)'
      operationId: getEpisodeDetail
      description: 'Lấy thông tin chi tiết của một episode'
      parameters:
        -
          name: id
          in: query
          required: true
          schema:
            type: string
          description: 'Episode ID'
          example: 675a1234567890abcdef1234
        -
          name: userId
          in: query
          required: false
          schema:
            type: string
          description: 'User ID để lấy progress và interactions'
      responses:
        '200':
          description: 'Chi tiết episode'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {episode: {type: object, properties: {_id: {type: string}, episode_title: {type: string, example: 'Tập 1: Khởi đầu'}, episode_number: {type: integer, example: 1}, description: {type: string}, duration: {type: number, example: 1800}, uri: {type: string, nullable: true}, streamUid: {type: string, nullable: true}}}, movie: {type: object, description: 'Thông tin phim chứa episode này'}, userProgress: {type: object, nullable: true, description: 'Tiến độ xem của user (nếu có userId)'}}}
        '404':
          description: 'Episode không tồn tại'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/rentals/rent:
    post:
      tags:
        - Rental
      summary: '🎬 Tạo order thuê phim (PayOS)'
      description: "**🎯 Tạo order thuê phim với tích hợp PayOS.**\n\n**Pricing Logic:**\n- Gói 48h: 30% giá phim\n- Gói 30d: 50% giá phim\n\n**Flow:**\n1. Validate user và movie tồn tại\n2. Kiểm tra user chưa thuê phim này (active rental)\n3. Tạo PayOS payment link\n4. Lưu payment record với status PENDING\n5. Trả về QR code và checkout URL\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRentalRequest'
      responses:
        '201':
          description: 'Tạo order thuê phim thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRentalResponse'
        '400':
          description: 'Validation error hoặc user đã thuê phim'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'User hoặc Movie không tồn tại'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/rentals/confirm-payment:
    post:
      tags:
        - Rental
      summary: '🔐 Xác nhận thanh toán (PayOS webhook/manual)'
      description: "**🔐 Xác nhận thanh toán và kích hoạt rental.**\n\n**Logic:**\n1. Kiểm tra payment tồn tại và thuộc về user\n2. Verify payment status từ PayOS\n3. Cập nhật payment status thành SUCCESS\n4. Tạo rental record với thời gian bắt đầu\n5. Trả về thông tin rental\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmPaymentRequest'
      responses:
        '200':
          description: 'Xác nhận thanh toán thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmPaymentResponse'
        '400':
          description: 'Đơn hàng không tồn tại hoặc chưa thanh toán'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/rentals/status/{movieId}':
    get:
      tags:
        - Rental
      summary: '📱 Kiểm tra quyền xem phim'
      description: "**📱 Kiểm tra user có quyền xem phim hay không.**\n\n**Return data:**\n- `hasAccess`: boolean - có quyền xem không\n- `rental`: object - thông tin rental (nếu có)\n- `remainingTime`: number - milliseconds còn lại\n- `remainingHours/Days`: number - thời gian còn lại formatted\n- `message`: string - thông báo cho user\n"
      parameters:
        -
          name: movieId
          in: query
          required: true
          schema:
            type: string
            example: 683d94d3602b36157f1c7af3
        -
          name: userId
          in: query
          required: true
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: 'Kiểm tra quyền xem thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalAccessResponse'
  /api/rentals/history:
    get:
      tags:
        - Rental
      summary: '📜 Lịch sử thuê phim của user'
      description: "**📜 Lấy danh sách lịch sử thuê phim với pagination.**\n\n**Filters:**\n- `status`: active, expired, cancelled\n- `rentalType`: 48h, 30d\n- `page`: trang hiện tại (default: 1)\n- `limit`: số item per page (default: 10)\n"
      parameters:
        -
          name: userId
          in: query
          required: true
          schema:
            type: string
          example: 507f1f77bcf86cd799439011
        -
          name: page
          in: query
          schema:
            type: integer
            default: 1
        -
          name: limit
          in: query
          schema:
            type: integer
            default: 10
        -
          name: status
          in: query
          schema:
            type: string
            enum:
              - active
              - expired
              - cancelled
        -
          name: rentalType
          in: query
          schema:
            type: string
            enum:
              - 48h
              - 30d
      responses:
        '200':
          description: 'Lấy lịch sử thuê phim thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalHistoryResponse'
  '/api/rentals/{rentalId}/cancel':
    put:
      tags:
        - Rental
      summary: '❌ Hủy rental'
      description: "**❌ Hủy rental của user (chỉ trong vòng 24h đầu).**\n"
      parameters:
        -
          name: rentalId
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: 'Hủy rental thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/rentals/webhook/payment-success:
    post:
      tags:
        - Rental
      summary: '🔗 PayOS webhook (PayOS only)'
      description: "**🔗 Webhook từ PayOS khi thanh toán thành công.**\n\n**⚠️ Chỉ PayOS được phép gọi endpoint này.**\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderCode:
                  type: string
                status:
                  type: string
                amount:
                  type: number
      responses:
        '200':
          description: 'Webhook xử lý thành công'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
components:
  schemas:
    MovieListItem:
      type: object
      description: 'Schema cho phim trong danh sách'
      properties:
        _id:
          type: string
          example: 683fb76c88e880e019875aca
          description: 'ID của phim'
        movie_title:
          type: string
          example: '1000 Years Old'
          description: 'Tên phim'
        description:
          type: string
          example: 'Bộ phim tình cảm đặc sắc từ Thái Lan...'
          description: 'Mô tả phim'
        poster_path:
          type: string
          example: 'https://imagedelivery.net/.../poster.jpg'
          description: 'URL poster phim'
        genres:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              genre_name:
                type: string
          description: 'Danh sách thể loại'
        producer:
          type: string
          example: 'WeTV Thailand'
          description: 'Nhà sản xuất'
        price:
          type: number
          example: 0
          description: 'Giá phim'
        createdAt:
          type: string
          format: date-time
          description: 'Thời gian tạo'
    PhoneRequest:
      type: object
      required:
        - phone
      properties:
        phone:
          type: string
          example: '0912345678'
          description: "Số điện thoại của người dùng\n- Format: 0xxxxxxxxx hoặc +84xxxxxxxxx\n- Phải là số điện thoại Việt Nam hợp lệ\n- Không được chứa ký tự đặc biệt hoặc khoảng trắng\n"
    VerifyOTPRequest:
      type: object
      required:
        - phone
        - otp
      properties:
        phone:
          type: string
          example: '0912345678'
          description: 'Số điện thoại đã dùng để nhận OTP'
        otp:
          type: string
          example: '123456'
          description: 'Mã OTP 6 số nhận được qua SMS'
    RegisterRequest:
      type: object
      required:
        - full_name
        - email
        - gender
      properties:
        full_name:
          type: string
          example: 'Nguyễn Văn A'
          description: 'Họ và tên người dùng'
        email:
          type: string
          format: email
          example: example@gmail.com
          description: 'Email người dùng (phải là email hợp lệ và chưa được sử dụng)'
        gender:
          type: string
          enum:
            - male
            - female
          example: male
          description: 'Giới tính (male = Nam, female = Nữ)'
    UpdateProfileRequest:
      type: object
      description: '🔄 Schema for multipart/form-data profile update with avatar upload'
      properties:
        full_name:
          type: string
          example: 'Đạt Thiện'
          description: 'Họ và tên người dùng (có thể update)'
        gender:
          type: string
          enum:
            - male
            - female
            - other
          example: male
          description: 'Giới tính (male=Nam, female=Nữ, other=Khác) - có thể update'
        avatar:
          type: string
          format: binary
          description: 'File ảnh đại diện (JPEG/PNG/GIF, max 2MB)'
      additionalProperties: false
      example:
        full_name: 'Đạt Thiện Updated'
        gender: male
        avatar: '[BINARY_FILE_DATA]'
    UpdateProfileTextOnlyRequest:
      type: object
      description: 'Schema for text-only profile update (no avatar)'
      properties:
        full_name:
          type: string
          example: 'Đạt Thiện'
          description: 'Họ và tên người dùng'
        gender:
          type: string
          enum:
            - male
            - female
            - other
          example: male
          description: 'Giới tính (male=Nam, female=Nữ, other=Khác)'
      additionalProperties: false
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Đăng nhập thành công'
        data:
          type: object
          properties:
            userId:
              type: string
              example: 683d7b63d0ee4aeb15a11369
              description: '⚠️ LƯU LẠI CÁI NÀY! Dùng cho tất cả APIs cần authentication'
            user:
              $ref: '#/components/schemas/UserInfo'
          description: 'Không còn trả về tokens nữa, chỉ có userId và user info'
    ProfileResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Lấy thông tin thành công'
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/UserInfo'
    UserInfo:
      type: object
      properties:
        _id:
          type: string
          example: 683d7b63d0ee4aeb15a11369
        uid:
          type: string
          example: 683d7b63d0ee4aeb15a11369
          description: 'UID để hiển thị trên màn hình (giống _id)'
        full_name:
          type: string
          example: 'Nguyễn Văn A'
        email:
          type: string
          example: example@gmail.com
        phone:
          type: string
          example: '0912345678'
        gender:
          type: string
          enum:
            - male
            - female
            - other
          example: male
          description: 'Giới tính: male=Nam, female=Nữ, other=Khác'
        avatar:
          type: string
          example: 'https://example.com/avatar.jpg'
        is_phone_verified:
          type: boolean
          example: true
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
    BannerMovie:
      type: object
      description: 'Schema cho phim trong banner section'
      properties:
        movieId:
          type: string
          example: 683fb76c88e880e019875aca
          description: 'ID của phim'
        title:
          type: string
          example: '1000 Years Old'
          description: 'Tên phim'
        poster:
          type: string
          example: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/phimbo-1000-years-old/medium'
          description: 'URL poster phim'
        description:
          type: string
          nullable: true
          example: 'Phim lẻ Việt Nam dựa trên truyện dài cùng tên của Nguyễn Nhật Ánh...'
          description: 'Mô tả phim (có thể null)'
        releaseYear:
          type: integer
          nullable: true
          example: 2024
          description: 'Năm phát hành (có thể null)'
        movieType:
          type: string
          example: 'Phim bộ'
          description: 'Loại phim (Phim bộ, Phim lẻ, Thể thao)'
        producer:
          type: string
          example: 'WeTV Thailand'
          description: 'Nhà sản xuất'
        genres:
          type: array
          items:
            type: string
          example:
            - 'Tình cảm'
            - 'Kinh dị'
          description: 'Danh sách thể loại (tối đa 3)'
    HomeCategoryItem:
      type: object
      description: 'Schema cho thể loại cha trong trang chủ'
      properties:
        _id:
          type: string
          example: 6847d080101e640d01a0c37f
          description: 'ID duy nhất của thể loại'
        title:
          type: string
          example: 'Hoạt hình'
          description: 'Tên thể loại hiển thị'
        description:
          type: string
          example: 'Phim hoạt hình, anime và phim động'
          description: 'Mô tả thể loại'
        poster:
          type: string
          example: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=300&fit=crop'
          description: 'URL hình ảnh poster cho thể loại'
        movie_count:
          type: integer
          example: 9
          description: 'Tổng số phim thuộc thể loại (bao gồm cả con)'
        has_children:
          type: boolean
          example: true
          description: 'Có thể loại con hay không'
        children_count:
          type: integer
          example: 4
          description: 'Số lượng thể loại con'
        sort_order:
          type: integer
          example: 1
          description: 'Thứ tự sắp xếp'
    GenreInfo:
      type: object
      description: 'Schema thông tin cơ bản của thể loại'
      properties:
        _id:
          type: string
          example: 6847d080101e640d01a0c37f
          description: 'ID của thể loại'
        genre_name:
          type: string
          example: 'Hoạt hình'
          description: 'Tên thể loại'
        description:
          type: string
          example: 'Phim hoạt hình, anime và phim động'
          description: 'Mô tả thể loại'
    ChildGenreItem:
      type: object
      description: 'Schema cho thể loại con'
      properties:
        _id:
          type: string
          example: 683d7d1dd0ee4aeb15a1138c
          description: 'ID của thể loại con'
        genre_name:
          type: string
          example: 'Hành Động'
          description: 'Tên thể loại con'
        description:
          type: string
          example: 'Phim hành động, võ thuật'
          description: 'Mô tả thể loại con'
        movie_count:
          type: integer
          example: 24
          description: 'Số lượng phim thuộc thể loại con'
        sort_order:
          type: integer
          example: 1
          description: 'Thứ tự sắp xếp'
    GridMovie:
      type: object
      description: 'Schema cho phim trong grid section'
      properties:
        movieId:
          type: string
          example: 683fb76c88e880e019875aca
          description: 'ID của phim'
        title:
          type: string
          example: '1000 Years Old'
          description: 'Tên phim'
        poster:
          type: string
          example: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/phimbo-1000-years-old/medium'
          description: 'URL poster phim'
        movieType:
          type: string
          example: 'Phim bộ'
          description: 'Loại phim (Phim bộ, Phim lẻ, Thể thao)'
        producer:
          type: string
          example: 'WeTV Thailand'
          description: 'Nhà sản xuất'
    MovieDetailResponse:
      type: object
      description: 'Schema response chi tiết phim tổng hợp cho màn hình detail'
      properties:
        movie:
          type: object
          description: 'Thông tin chi tiết phim'
          properties:
            _id:
              type: string
              example: 675a1234567890abcdef1234
            movie_title:
              type: string
              example: 'Hồ Sơ Trinh Sát II - Tập 1'
            description:
              type: string
              example: 'Bộ phim trinh thám Hong Kong nổi tiếng...'
            production_time:
              type: string
              format: date-time
              example: '1995-12-15T00:00:00.000Z'
            producer:
              type: string
              example: 'TVB Hong Kong'
            poster_path:
              type: string
              example: 'https://example.com/poster.jpg'
            genres:
              type: array
              items:
                type: object
                properties:
                  _id: {type: string}
                  genre_name: {type: string}
                  description: {type: string}
            movie_type:
              type: string
              enum:
                - 'Phim bộ'
                - 'Phim lẻ'
                - 'Thể thao'
              example: 'Phim bộ'
            price:
              type: number
              example: 0
            is_free:
              type: boolean
              example: true
            price_display:
              type: string
              example: 'Miễn phí'
            episodes:
              type: array
              description: 'Danh sách tập (chỉ có khi là phim bộ)'
              items:
                type: object
                properties:
                  _id: {type: string}
                  episode_number: {type: integer}
                  episode_title: {type: string}
                  episode_description: {type: string}
                  duration: {type: integer}
                  uri: {type: string, nullable: true}
                  is_locked: {type: boolean}
            duration:
              type: integer
              description: 'Thời lượng phim lẻ (phút)'
            is_locked:
              type: boolean
              description: 'Phim có bị khóa không'
        stats:
          type: object
          description: 'Thống kê phim'
          properties:
            views:
              type: integer
              example: 15420
            viewsFormatted:
              type: string
              example: 15.4K
            likes:
              type: integer
              example: 892
            rating:
              type: number
              format: float
              example: 4.6
            totalRatings:
              type: integer
              example: 1250
            comments:
              type: integer
              example: 156
        recentComments:
          type: array
          description: '5 bình luận gần đây nhất'
          items:
            type: object
            properties:
              _id:
                type: string
              user:
                type: object
                properties:
                  name: {type: string}
                  email: {type: string}
              comment:
                type: string
              isLike:
                type: boolean
              createdAt:
                type: string
                format: date-time
        userInteractions:
          type: object
          nullable: true
          description: 'Tương tác của user (null nếu chưa đăng nhập)'
          properties:
            hasLiked:
              type: boolean
              example: true
              description: 'User đã like phim chưa'
            hasRated:
              type: boolean
              example: true
              description: 'User đã rate phim chưa'
            userComment:
              type: string
              nullable: true
              example: 'Phim hay quá!'
              description: 'Bình luận của user'
            isFavorite:
              type: boolean
              example: true
              description: 'Đã thêm vào yêu thích chưa'
            isFollowing:
              type: boolean
              example: true
              description: 'Đã theo dõi phim chưa (giống isFavorite)'
            watchingProgress:
              type: object
              nullable: true
              description: 'Tiến độ xem phim'
              properties:
                episodeNumber:
                  type: integer
                  example: 1
                watchPercentage:
                  type: number
                  example: 75.5
                currentTime:
                  type: integer
                  example: 2040
                lastWatched:
                  type: string
                  format: date-time
                  example: '2024-12-11T10:30:00.000Z'
        relatedMovies:
          type: array
          description: 'Phim liên quan cho tab "Liên quan"'
          items:
            type: object
            properties:
              movieId:
                type: string
                example: 675a1234567890abcdef5678
              title:
                type: string
                example: 'Hồ Sơ Trinh Sát I'
              poster:
                type: string
                example: 'https://example.com/related1.jpg'
              movieType:
                type: string
                example: 'Phim bộ'
              producer:
                type: string
                example: 'TVB Hong Kong'
        tabs:
          type: object
          description: 'Cấu hình tabs cho UI'
          properties:
            showEpisodesList:
              type: boolean
              example: true
              description: 'true = hiện tab ''Danh sách'' (chỉ phim bộ có true)'
            showRelated:
              type: boolean
              example: true
              description: 'true = hiện tab ''Liên quan'' (luôn luôn true)'
    Genre:
      type: object
      properties:
        _id:
          type: string
          example: 683d7b63d0ee4aeb15a11369
        genre_name:
          type: string
          example: 'Hành động'
        description:
          type: string
          example: 'Phim hành động gay cấn'
        poster:
          type: string
          example: 'https://example.com/poster.jpg'
        parent_genre:
          type: string
          nullable: true
          example: 683d7b63d0ee4aeb15a11369
        is_parent:
          type: boolean
          example: true
        is_active:
          type: boolean
          example: true
        sort_order:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    SearchMovieResult:
      type: object
      description: '🔍 Schema phim tối ưu cho Search Results + FlatList'
      properties:
        movieId:
          type: string
          example: 683fb76c88e880e019875aca
          description: 'ID của phim'
        title:
          type: string
          example: '1000 Years Old'
          description: 'Tên phim'
        poster:
          type: string
          nullable: true
          example: 'https://imagedelivery.net/8396e0173865666f8dae8dd32565efca/phimbo-1000-years-old/medium'
          description: 'URL poster phim'
        movieType:
          type: string
          enum:
            - 'Phim bộ'
            - 'Phim lẻ'
            - 'Thể thao'
          example: 'Phim bộ'
          description: 'Loại phim'
        producer:
          type: string
          example: 'WeTV Thailand'
          description: 'Nhà sản xuất'
        description:
          type: string
          nullable: true
          example: 'Bộ phim tình cảm đặc sắc từ Thái Lan với câu chuyện tình yêu vượt thời gian...'
          description: 'Mô tả ngắn phim (100 ký tự)'
        releaseYear:
          type: integer
          nullable: true
          example: 2024
          description: 'Năm phát hành'
        price:
          type: number
          example: 0
          description: 'Giá phim (VNĐ)'
        is_free:
          type: boolean
          example: true
          description: 'Phim miễn phí hay không'
        price_display:
          type: string
          example: 'Miễn phí'
          description: 'Hiển thị giá định dạng'
        view_count:
          type: integer
          example: 15420
          description: 'Số lượt xem'
        favorite_count:
          type: integer
          example: 892
          description: 'Số lượt yêu thích'
        rating:
          type: number
          format: float
          example: 4.6
          description: 'Đánh giá trung bình (0-5)'
        total_ratings:
          type: integer
          example: 1250
          description: 'Tổng số đánh giá'
        total_episodes:
          type: integer
          example: 12
          description: 'Tổng số tập'
        genres:
          type: array
          items:
            type: string
          example:
            - 'Tình cảm'
            - Drama
          description: 'Danh sách thể loại (tối đa 3)'
    PaginationInfo:
      type: object
      description: '📄 Thông tin phân trang cho FlatList infinite scroll'
      properties:
        current_page:
          type: integer
          example: 1
          description: 'Trang hiện tại'
        total_pages:
          type: integer
          example: 5
          description: 'Tổng số trang'
        total_items:
          type: integer
          example: 89
          description: 'Tổng số phim'
        items_per_page:
          type: integer
          example: 20
          description: 'Số phim mỗi trang'
        has_next:
          type: boolean
          example: true
          description: 'Có trang tiếp theo không'
        has_prev:
          type: boolean
          example: false
          description: 'Có trang trước không'
    SearchInfo:
      type: object
      description: '🔍 Thông tin tìm kiếm và filter đã áp dụng'
      properties:
        keyword:
          type: string
          nullable: true
          example: avatar
          description: 'Từ khóa tìm kiếm'
        filters:
          type: object
          properties:
            genre:
              type: string
              nullable: true
              example: 6847d080101e640d01a0c37f
              description: 'ID thể loại đã lọc'
            movie_type:
              type: string
              nullable: true
              example: 'Phim lẻ'
              description: 'Loại phim đã lọc'
            is_free:
              type: string
              nullable: true
              example: true
              description: 'Filter miễn phí'
            sort:
              type: string
              example: phobien
              description: 'Cách sắp xếp đã áp dụng'
    VideoStreamResponse:
      type: object
      description: '🎬 Schema for Cloudflare Stream video response'
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            videoId:
              type: string
              example: 675a1234567890abcdef1234
              description: 'Episode ID hoặc Movie ID'
            streamUid:
              type: string
              example: a1b2c3d4e5f6789012345678
              description: 'Cloudflare Stream UID'
            type:
              type: string
              example: cloudflare-stream
              description: 'Loại streaming service'
            movie:
              type: object
              properties:
                _id:
                  type: string
                title:
                  type: string
                  example: 'The Batman 2024'
                type:
                  type: string
                  example: 'Phim bộ'
            episode:
              type: object
              nullable: true
              properties:
                _id:
                  type: string
                title:
                  type: string
                  example: 'Tập 1: Khởi đầu'
                number:
                  type: integer
                  example: 1
            stream:
              type: object
              properties:
                urls:
                  type: object
                  properties: {hls: {type: string, example: 'https://customer-account.cloudflarestream.com/uid/manifest/video.m3u8', description: 'HLS streaming URL cho mobile/iOS'}, dash: {type: string, example: 'https://customer-account.cloudflarestream.com/uid/manifest/video.mpd', description: 'DASH streaming URL cho web'}, mp4: {type: object, properties: {auto: {type: string, example: 'https://customer-account.cloudflarestream.com/uid/manifest/video.mp4'}, 360p: {type: string}, 480p: {type: string}, 720p: {type: string}, 1080p: {type: string}}}, thumbnail: {type: string, nullable: true, example: 'https://customer-account.cloudflarestream.com/uid/thumbnails/thumbnail.jpg', description: 'Auto-generated thumbnail'}, preview: {type: string, example: 'https://customer-account.cloudflarestream.com/uid/thumbnails/thumbnail.jpg?time=1s'}}
                recommended:
                  type: object
                  description: 'URLs được đề xuất dựa trên device/platform'
                  properties: {mobile: {type: string, description: 'HLS URL cho mobile'}, web: {type: string, description: 'DASH URL cho web browsers'}, fallback: {type: string, description: 'MP4 URL cho compatibility'}}
                duration:
                  type: number
                  example: 3600
                  description: 'Video duration in seconds'
                size:
                  type: number
                  example: 524288000
                  description: 'File size in bytes'
                created:
                  type: string
                  format: date-time
                  description: 'Upload timestamp'
                processingStatus:
                  type: string
                  example: ready
                  description: 'Video processing status'
    CloudflareImageResponse:
      type: object
      description: '🖼️ Schema for Cloudflare Images upload response'
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Ảnh đã được upload thành công lên Cloudflare Images'
        data:
          type: object
          properties:
            id:
              type: string
              example: 2cdc28f0-017a-49c4-9ed7-87056c83901f
              description: 'Cloudflare Images ID'
            filename:
              type: string
              example: avatar.jpg
              description: 'Original filename'
            uploaded:
              type: string
              format: date-time
              description: 'Upload timestamp'
            urls:
              type: object
              properties:
                original:
                  type: string
                  example: 'https://imagedelivery.net/account/id/public'
                  description: 'Original size image'
                avatar:
                  type: string
                  example: 'https://imagedelivery.net/account/id/avatar'
                  description: '150x150px optimized for avatars'
                thumbnail:
                  type: string
                  example: 'https://imagedelivery.net/account/id/thumb'
                  description: '300x300px thumbnail'
                medium:
                  type: string
                  example: 'https://imagedelivery.net/account/id/medium'
                  description: '800x600px medium size'
            recommendedUrl:
              type: string
              description: 'URL được đề xuất dựa trên variant requested'
    CloudflareVideoUploadResponse:
      type: object
      description: '🎬 Schema for Cloudflare Stream video upload response'
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 'Video đã được upload thành công lên Cloudflare Stream'
        data:
          type: object
          properties:
            episodeId:
              type: string
              example: 675a1234567890abcdef1234
              description: 'Episode ID liên kết với video'
            streamUid:
              type: string
              example: a1b2c3d4e5f6789012345678
              description: 'Cloudflare Stream UID'
            uploadStatus:
              type: string
              enum:
                - ready
                - inprogress
                - error
              example: inprogress
              description: 'Trạng thái upload/processing'
            playback:
              type: object
              nullable: true
              description: 'Playback URLs (available when status=ready)'
              properties:
                hls:
                  type: string
                dash:
                  type: string
                mp4:
                  type: object
            thumbnail:
              type: string
              nullable: true
              example: 'https://customer-account.cloudflarestream.com/uid/thumbnails/thumbnail.jpg'
              description: 'Auto-generated thumbnail'
            processingStatus:
              type: string
              example: ready
              description: 'Video processing status'
    CreateRentalRequest:
      type: object
      required:
        - userId
        - movieId
        - rentalType
      properties:
        userId:
          type: string
          example: 507f1f77bcf86cd799439011
          description: 'ID của user thuê phim'
        movieId:
          type: string
          example: 683d94d3602b36157f1c7af3
          description: 'ID của phim cần thuê'
        rentalType:
          type: string
          enum:
            - 48h
            - 30d
          example: 48h
          description: 'Loại gói thuê: 48h (30% giá phim) hoặc 30d (50% giá phim)'
    CreateRentalResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Tạo order thuê phim thành công'
        data:
          type: object
          properties:
            orderCode:
              type: string
              example: '1736758123456'
              description: 'Mã đơn hàng PayOS'
            checkoutUrl:
              type: string
              example: 'https://pay.payos.vn/web/a1b2c3d4'
              description: 'URL checkout PayOS'
            amount:
              type: number
              example: 15000
              description: 'Số tiền cần thanh toán (VNĐ)'
            rentalType:
              type: string
              example: 48h
            movieTitle:
              type: string
              example: 'Avatar: The Way of Water'
            qrCode:
              type: string
              example: 00020101021238570010A000000727012800069704...QR_CODE_DATA
              description: 'QR Code string cho thanh toán'
            paymentInfo:
              type: object
              properties:
                bin:
                  type: string
                  example: '970436'
                accountNumber:
                  type: string
                  example: '12345678901'
                accountName:
                  type: string
                  example: 'CONG TY TNHH ABC'
    ConfirmPaymentRequest:
      type: object
      required:
        - orderCode
        - userId
      properties:
        orderCode:
          type: string
          example: '1736758123456'
          description: 'Mã đơn hàng PayOS'
        userId:
          type: string
          example: 507f1f77bcf86cd799439011
          description: 'ID của user'
    ConfirmPaymentResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Thuê phim thành công! Bạn có thể xem phim trong 48 giờ.'
        data:
          $ref: '#/components/schemas/RentalInfo'
    RentalAccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            hasAccess:
              type: boolean
              example: true
              description: 'User có quyền xem phim hay không'
            rental:
              $ref: '#/components/schemas/RentalInfo'
              nullable: true
            remainingTime:
              type: number
              example: 167400000
              description: 'Thời gian còn lại (milliseconds)'
            remainingHours:
              type: number
              example: 47
              description: 'Số giờ còn lại'
            remainingDays:
              type: number
              example: 2
              description: 'Số ngày còn lại'
            message:
              type: string
              example: 'Còn lại 47 giờ'
    RentalHistoryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Lấy lịch sử thuê phim thành công'
        data:
          type: object
          properties:
            rentals:
              type: array
              items:
                $ref: '#/components/schemas/RentalInfo'
            pagination:
              type: object
              properties:
                currentPage:
                  type: integer
                  example: 1
                totalPages:
                  type: integer
                  example: 3
                total:
                  type: integer
                  example: 25
                hasNext:
                  type: boolean
                  example: true
                hasPrev:
                  type: boolean
                  example: false
    RentalInfo:
      type: object
      properties:
        _id:
          type: string
          example: 64f1a2b3c4d5e6f7g8h9i0j1
        userId:
          type: string
          example: 507f1f77bcf86cd799439011
        movieId:
          type: object
          properties:
            _id:
              type: string
              example: 683d94d3602b36157f1c7af3
            title:
              type: string
              example: 'Avatar: The Way of Water'
            poster:
              type: string
              example: 'https://imagedelivery.net/.../poster.jpg'
            duration:
              type: number
              example: 120
        paymentId:
          type: object
          properties:
            _id:
              type: string
            amount:
              type: number
              example: 15000
            orderCode:
              type: string
              example: '1736758123456'
        rentalType:
          type: string
          enum:
            - 48h
            - 30d
          example: 48h
        status:
          type: string
          enum:
            - active
            - expired
            - cancelled
          example: active
        startTime:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00.000Z'
        endTime:
          type: string
          format: date-time
          example: '2024-01-17T10:30:00.000Z'
        accessCount:
          type: number
          example: 5
          description: 'Số lần user đã truy cập xem phim'
        lastAccess:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    RevenueStatsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Lấy thống kê doanh thu thành công'
        data:
          type: object
          properties:
            summary:
              type: object
              properties:
                totalRevenue:
                  type: number
                  example: 5420000
                  description: 'Tổng doanh thu (VNĐ)'
                totalRentals:
                  type: number
                  example: 287
                  description: 'Tổng số lượt thuê'
                averageRevenuePerRental:
                  type: number
                  example: 18884
                  description: 'Doanh thu trung bình mỗi lượt thuê'
            dailyStats:
              type: array
              items:
                type: object
                properties:
                  date: {type: string, format: date, example: '2024-01-15'}
                  revenue: {type: number, example: 125000}
                  rentals: {type: number, example: 8}
                  rentalTypes: {type: object, properties: {48h: {type: number, example: 5}, 30d: {type: number, example: 3}}}
    PopularRentalsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Lấy danh sách phim phổ biến thành công'
        data:
          type: array
          items:
            type: object
            properties:
              movieId:
                type: string
                example: 683d94d3602b36157f1c7af3
              title:
                type: string
                example: 'Avatar: The Way of Water'
              poster:
                type: string
                example: 'https://imagedelivery.net/.../poster.jpg'
              totalRentals:
                type: number
                example: 45
                description: 'Tổng số lượt thuê'
              revenue:
                type: number
                example: 850000
                description: 'Doanh thu từ phim này'
              rentalTypes:
                type: object
                properties:
                  48h: {type: number, example: 30}
                  30d: {type: number, example: 15}
    CronStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Lấy trạng thái cron jobs thành công'
        data:
          type: object
          properties:
            expiredRentalsCheck:
              type: object
              properties:
                running:
                  type: boolean
                  example: false
                scheduled:
                  type: boolean
                  example: false
            expiringNotifications:
              type: object
              properties:
                running:
                  type: boolean
                  example: false
                scheduled:
                  type: boolean
                  example: false
            cleanupOldRentals:
              type: object
              properties:
                running:
                  type: boolean
                  example: false
                scheduled:
                  type: boolean
                  example: false
            dailyStatsGeneration:
              type: object
              properties:
                running:
                  type: boolean
                  example: false
                scheduled:
                  type: boolean
                  example: false
    ManualCheckResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Manual check hoàn thành'
        data:
          type: object
          properties:
            success:
              type: boolean
              example: true
            expiredCount:
              type: number
              example: 3
              description: 'Số rental đã bị expire'
            expiringCount:
              type: number
              example: 5
              description: 'Số rental sắp hết hạn'
