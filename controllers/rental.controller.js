const rentalService = require('../services/rental.service');
const cronService = require('../services/cron.service');
const MovieRental = require('../models/MovieRental');
const { validationResult } = require('express-validator');

class RentalController {

    /**
     * POST /api/rentals/rent
     * T·∫°o order thu√™ phim
     */
    async createRentalOrder(req, res) {
        try {
            // Validate request
            const errors = validationResult(req);
            if (!errors.isEmpty()) {
                return res.status(400).json({
                    success: false,
                    message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
                    errors: errors.array()
                });
            }

            const { userId, movieId, rentalType } = req.body;

            // Validate rentalType
            if (!['48h', '30d'].includes(rentalType)) {
                return res.status(400).json({
                    success: false,
                    message: 'Lo·∫°i thu√™ kh√¥ng h·ª£p l·ªá. Ch·ªçn 48h ho·∫∑c 30d'
                });
            }

            const result = await rentalService.createRentalOrder(userId, movieId, rentalType);

            res.status(201).json({
                success: true,
                message: 'T·∫°o order thu√™ phim th√†nh c√¥ng',
                data: result.data
            });

        } catch (error) {
            console.error('Error in createRentalOrder:', error);
            res.status(500).json({
                success: false,
                message: error.message || 'L·ªói server khi t·∫°o order thu√™ phim',
                data: null
            });
        }
    }

    /**
     * POST /api/rentals/check-status
     * Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n m√† kh√¥ng confirm
     */
    async checkPaymentStatus(req, res) {
        try {
            const { orderCode, userId } = req.body;

            if (!orderCode || !userId) {
                return res.status(400).json({
                    success: false,
                    message: 'orderCode v√† userId l√† b·∫Øt bu·ªôc'
                });
            }

            const result = await rentalService.checkPaymentStatus(orderCode, userId);

            res.json({
                success: true,
                message: 'Ki·ªÉm tra tr·∫°ng th√°i th√†nh c√¥ng',
                data: result
            });

        } catch (error) {
            console.error('Error in checkPaymentStatus:', error);
            res.status(200).json({
                success: false,
                message: error.message || 'L·ªói server khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n',
                data: { isPaid: false }
            });
        }
    }

    /**
     * POST /api/rentals/confirm-payment
     * X√°c nh·∫≠n thanh to√°n v√† k√≠ch ho·∫°t rental
     */
    async confirmRentalPayment(req, res) {
        try {
            const { orderCode, userId } = req.body;

            if (!orderCode || !userId) {
                return res.status(400).json({
                    success: false,
                    message: 'orderCode v√† userId l√† b·∫Øt bu·ªôc'
                });
            }

            const result = await rentalService.confirmRentalPayment(orderCode, userId);

            res.json({
                success: true,
                message: result.data.message,
                data: result.data.rental
            });

        } catch (error) {
            console.error('Error in confirmRentalPayment:', error);
            res.status(500).json({
                success: false,
                message: error.message || 'L·ªói server khi x√°c nh·∫≠n thanh to√°n',
                data: null
            });
        }
    }

    /**
     * GET /api/rentals/status/:movieId
     * Ki·ªÉm tra quy·ªÅn xem phim
     */
    async checkRentalAccess(req, res) {
        try {
            console.log('üéØ [Controller] checkRentalAccess called');
            console.log('üìç [Controller] Request params:', req.params);
            console.log('üìç [Controller] Request query:', req.query);
            console.log('üìç [Controller] Request URL:', req.originalUrl);
            console.log('üìç [Controller] Request method:', req.method);

            const { movieId } = req.params;
            const { userId } = req.query;

            console.log('üîç [Controller] Extracted values:', { movieId, userId });

            if (!userId) {
                console.log('‚ùå [Controller] Missing userId');
                return res.status(400).json({
                    success: false,
                    message: 'userId l√† b·∫Øt bu·ªôc'
                });
            }

            console.log('üöÄ [Controller] Calling rentalService.checkRentalAccess...');
            const result = await rentalService.checkRentalAccess(userId, movieId);
            console.log('‚úÖ [Controller] Service result:', result);

            res.json({
                success: true,
                data: result
            });

        } catch (error) {
            console.error('üí• [Controller] Error in checkRentalAccess:', error);
            res.status(500).json({
                success: false,
                message: error.message || 'L·ªói server khi ki·ªÉm tra quy·ªÅn xem',
                data: null
            });
        }
    }

    /**
     * GET /api/rentals/history
     * L·∫•y l·ªãch s·ª≠ thu√™ phim c·ªßa user
     * @query userId - ID c·ªßa user
     * @query page - S·ªë trang (default: 1)
     * @query limit - S·ªë l∆∞·ª£ng k·∫øt qu·∫£ m·ªói trang (default: 10)
     * @query status - L·ªçc theo tr·∫°ng th√°i rental
     * @query rentalType - L·ªçc theo lo·∫°i thu√™ (48h/30d)
     * @query searchTitle - T√¨m ki·∫øm theo t√™n phim
     */
    async getUserRentalHistory(req, res) {
        try {
            const { userId, page = 1, limit = 10, status, rentalType, searchTitle } = req.query;

            if (!userId) {
                return res.status(400).json({
                    success: false,
                    message: 'userId l√† b·∫Øt bu·ªôc'
                });
            }

            const options = {
                page: parseInt(page),
                limit: parseInt(limit),
                status,
                rentalType,
                searchTitle
            };

            const result = await rentalService.getUserRentalHistory(userId, options);

            res.json({
                success: true,
                message: 'L·∫•y l·ªãch s·ª≠ thu√™ phim th√†nh c√¥ng',
                data: result.data
            });

        } catch (error) {
            console.error('Error in getUserRentalHistory:', error);
            res.status(500).json({
                success: false,
                message: error.message || 'L·ªói server khi l·∫•y l·ªãch s·ª≠ thu√™ phim',
                data: null
            });
        }
    }

    /**
     * PUT /api/rentals/:rentalId/cancel
     * H·ªßy rental
     */
    async cancelRental(req, res) {
        try {
            const { rentalId } = req.params;
            const { userId } = req.body;

            if (!userId) {
                return res.status(400).json({
                    success: false,
                    message: 'userId l√† b·∫Øt bu·ªôc'
                });
            }

            const result = await rentalService.cancelRental(userId, rentalId);

            res.json({
                success: true,
                message: result.message,
                data: result.data
            });

        } catch (error) {
            console.error('Error in cancelRental:', error);
            res.status(500).json({
                success: false,
                message: error.message || 'L·ªói server khi h·ªßy rental',
                data: null
            });
        }
    }

    /**
     * POST /api/rentals/activate
     * K√≠ch ho·∫°t rental khi user nh·∫•n "xem ngay"
     */
    async activateRental(req, res) {
        try {
            const { userId, movieId } = req.body;

            if (!userId || !movieId) {
                return res.status(400).json({
                    success: false,
                    message: 'userId v√† movieId l√† b·∫Øt bu·ªôc'
                });
            }

            const result = await rentalService.activateRental(userId, movieId);

            res.json({
                success: true,
                message: result.data.message,
                data: result.data.rental
            });

        } catch (error) {
            console.error('Error in activateRental:', error);
            res.status(500).json({
                success: false,
                message: error.message || 'L·ªói server khi k√≠ch ho·∫°t rental',
                data: null
            });
        }
    }

    /**
     * GET /api/rentals/stats/revenue
     * L·∫•y th·ªëng k√™ revenue (admin only)
     */
    async getRevenueStats(req, res) {
        try {
            const { startDate, endDate } = req.query;

            if (!startDate || !endDate) {
                return res.status(400).json({
                    success: false,
                    message: 'startDate v√† endDate l√† b·∫Øt bu·ªôc'
                });
            }

            const start = new Date(startDate);
            const end = new Date(endDate);
            
            if (isNaN(start.getTime()) || isNaN(end.getTime())) {
                return res.status(400).json({
                    success: false,
                    message: 'ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá'
                });
            }

            const result = await rentalService.getRevenueStats(start, end);

            res.json({
                success: true,
                message: 'L·∫•y th·ªëng k√™ revenue th√†nh c√¥ng',
                data: result.data
            });

        } catch (error) {
            console.error('Error in getRevenueStats:', error);
            res.status(500).json({
                success: false,
                message: error.message || 'L·ªói server khi l·∫•y th·ªëng k√™',
                data: null
            });
        }
    }

    /**
     * GET /api/rentals/stats/popular
     * L·∫•y danh s√°ch phim ƒë∆∞·ª£c thu√™ nhi·ªÅu nh·∫•t
     */
    async getPopularRentals(req, res) {
        try {
            const { limit = 10 } = req.query;

            const result = await rentalService.getPopularRentals(parseInt(limit));

            res.json({
                success: true,
                message: 'L·∫•y danh s√°ch phim ph·ªï bi·∫øn th√†nh c√¥ng',
                data: result.data
            });

        } catch (error) {
            console.error('Error in getPopularRentals:', error);
            res.status(500).json({
                success: false,
                message: error.message || 'L·ªói server khi l·∫•y danh s√°ch phim ph·ªï bi·∫øn',
                data: null
            });
        }
    }

    // ===========================================
    // CRON JOB MANAGEMENT ENDPOINTS (Admin only)
    // ===========================================

    /**
     * GET /api/rentals/cron/status
     * L·∫•y tr·∫°ng th√°i c√°c cron jobs
     */
    async getCronJobsStatus(req, res) {
        try {
            const status = cronService.getJobsStatus();

            res.json({
                success: true,
                message: 'L·∫•y tr·∫°ng th√°i cron jobs th√†nh c√¥ng',
                data: status
            });

        } catch (error) {
            console.error('Error in getCronJobsStatus:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server khi l·∫•y tr·∫°ng th√°i cron jobs',
                data: null
            });
        }
    }

    /**
     * POST /api/rentals/cron/manual-check
     * Ch·∫°y manual check rental expiration
     * @access Admin
     */
    async runManualCheck(req, res) {
        try {
            const cronService = require('../services/cron.service');
            
            // Run manual rental check
            const rentalResult = await MovieRental.findExpiredRentals();
            const expiredCount = rentalResult.length;
            
            for (const rental of rentalResult) {
                try {
                    await rental.expire();
                } catch (error) {
                    console.error(`Error expiring rental ${rental._id}:`, error);
                }
            }
            
            // Run manual notification check
            const notificationResult = await cronService.runManualNotificationCheck();
            
            res.json({
                success: true,
                message: 'Manual check completed',
                data: {
                    expiredRentals: {
                        found: expiredCount,
                        processed: expiredCount
                    },
                    notifications: {
                        found: notificationResult.total,
                        sent: notificationResult.sent
                    }
                }
            });
        } catch (error) {
            console.error('Error in manual check:', error);
            res.status(500).json({
                success: false,
                message: 'Error running manual check',
                error: error.message
            });
        }
    }

    /**
     * PUT /api/rentals/cron/:action/:jobName
     * Start/Stop m·ªôt cron job c·ª• th·ªÉ
     */
    async controlCronJob(req, res) {
        try {
            const { action, jobName } = req.params;

            if (!['start', 'stop'].includes(action)) {
                return res.status(400).json({
                    success: false,
                    message: 'Action ph·∫£i l√† start ho·∫∑c stop'
                });
            }

            let result;
            if (action === 'start') {
                result = cronService.startJob(jobName);
            } else {
                result = cronService.stopJob(jobName);
            }

            if (!result) {
                return res.status(404).json({
                    success: false,
                    message: `Kh√¥ng t√¨m th·∫•y job ${jobName}`
                });
            }

            res.json({
                success: true,
                message: `${action === 'start' ? 'Kh·ªüi ƒë·ªông' : 'D·ª´ng'} job ${jobName} th√†nh c√¥ng`
            });

        } catch (error) {
            console.error('Error in controlCronJob:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server khi ƒëi·ªÅu khi·ªÉn cron job',
                data: null
            });
        }
    }

    /**
     * PUT /api/rentals/cron/all/:action
     * Start/Stop t·∫•t c·∫£ cron jobs
     */
    async controlAllCronJobs(req, res) {
        try {
            const { action } = req.params;

            if (!['start', 'stop'].includes(action)) {
                return res.status(400).json({
                    success: false,
                    message: 'Action ph·∫£i l√† start ho·∫∑c stop'
                });
            }

            if (action === 'start') {
                cronService.startAllJobs();
            } else {
                cronService.stopAllJobs();
            }

            res.json({
                success: true,
                message: `${action === 'start' ? 'Kh·ªüi ƒë·ªông' : 'D·ª´ng'} t·∫•t c·∫£ cron jobs th√†nh c√¥ng`
            });

        } catch (error) {
            console.error('Error in controlAllCronJobs:', error);
            res.status(500).json({
                success: false,
                message: 'L·ªói server khi ƒëi·ªÅu khi·ªÉn t·∫•t c·∫£ cron jobs',
                data: null
            });
        }
    }

    // ===========================================
    // WEBHOOK HANDLERS
    // ===========================================

    /**
     * POST /api/rentals/webhook/payment-success
     * Webhook t·ª´ PayOS khi thanh to√°n th√†nh c√¥ng
     */
    async handlePaymentWebhook(req, res) {
        try {
            // TODO: Verify webhook signature t·ª´ PayOS
            console.log('Payment webhook received:', req.body);

            const { orderCode, status } = req.body;

            if (status === 'PAID') {
                // Auto-confirm rental payment
                // Note: C·∫ßn l·∫•y userId t·ª´ database th√¥ng qua orderCode
                // Hi·ªán t·∫°i webhook ch·ªâ log, logic confirmation s·∫Ω ƒë∆∞·ª£c g·ªçi t·ª´ client
                console.log(`Payment confirmed for order: ${orderCode}`);
            }

            res.json({
                success: true,
                message: 'Webhook processed'
            });

        } catch (error) {
            console.error('Error in handlePaymentWebhook:', error);
            res.status(500).json({
                success: false,
                message: 'Webhook processing failed'
            });
        }
    }
}

module.exports = new RentalController();