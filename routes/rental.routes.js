const express = require('express');
const router = express.Router();
const { body, param, query } = require('express-validator');
const rentalController = require('../controllers/rental.controller');
const { validationResult } = require('express-validator');

// Middleware to handle validation errors
const handleValidationErrors = (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        console.log('‚ùå [Validation] Errors found:', errors.array());
        return res.status(400).json({
            success: false,
            message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
            errors: errors.array()
        });
    }
    console.log('‚úÖ [Validation] All validations passed');
    next();
};

// Validation middleware
const validateCreateRental = [
    body('userId')
        .notEmpty()
        .withMessage('userId l√† b·∫Øt bu·ªôc')
        .isMongoId()
        .withMessage('userId ph·∫£i l√† ObjectId h·ª£p l·ªá'),
    body('movieId')
        .notEmpty()
        .withMessage('movieId l√† b·∫Øt bu·ªôc')
        .isMongoId()
        .withMessage('movieId ph·∫£i l√† ObjectId h·ª£p l·ªá'),
    body('rentalType')
        .notEmpty()
        .withMessage('rentalType l√† b·∫Øt bu·ªôc')
        .isIn(['48h', '30d'])
        .withMessage('rentalType ph·∫£i l√† 48h ho·∫∑c 30d')
];

const validateConfirmPayment = [
    body('orderCode')
        .notEmpty()
        .withMessage('orderCode l√† b·∫Øt bu·ªôc')
        .isNumeric()
        .withMessage('orderCode ph·∫£i l√† s·ªë'),
    body('userId')
        .notEmpty()
        .withMessage('userId l√† b·∫Øt bu·ªôc')
        .isMongoId()
        .withMessage('userId ph·∫£i l√† ObjectId h·ª£p l·ªá')
];

const validateMovieId = [
    param('movieId')
        .notEmpty()
        .withMessage('movieId l√† b·∫Øt bu·ªôc')
        .custom((value) => {
            console.log('üîç [Validation] movieId:', value, 'type:', typeof value);
            // More flexible validation - allow any string for now to debug
            if (!value || value === 'undefined') {
                throw new Error('movieId kh√¥ng h·ª£p l·ªá');
            }
            return true;
        })
];

const validateUserId = [
    query('userId')
        .notEmpty()
        .withMessage('userId l√† b·∫Øt bu·ªôc')
        .custom((value) => {
            console.log('üîç [Validation] userId:', value, 'type:', typeof value);
            // More flexible validation - allow any string for now to debug
            if (!value || value === 'undefined') {
                throw new Error('userId kh√¥ng h·ª£p l·ªá');
            }
            return true;
        })
];

const validateRentalId = [
    param('rentalId')
        .notEmpty()
        .withMessage('rentalId l√† b·∫Øt bu·ªôc')
        .isMongoId()
        .withMessage('rentalId ph·∫£i l√† ObjectId h·ª£p l·ªá')
];

const validateDateRange = [
    query('startDate')
        .notEmpty()
        .withMessage('startDate l√† b·∫Øt bu·ªôc')
        .isISO8601()
        .withMessage('startDate ph·∫£i c√≥ ƒë·ªãnh d·∫°ng ISO8601'),
    query('endDate')
        .notEmpty()
        .withMessage('endDate l√† b·∫Øt bu·ªôc')
        .isISO8601()
        .withMessage('endDate ph·∫£i c√≥ ƒë·ªãnh d·∫°ng ISO8601')
];

// ===========================================
// RENTAL ENDPOINTS
// ===========================================

/**
 * @route GET /api/rentals/test
 * @desc Test endpoint ƒë·ªÉ ki·ªÉm tra rental route ho·∫°t ƒë·ªông
 * @access Public
 */
router.get('/test', (req, res) => {
  res.json({
    success: true,
    message: 'Rental routes working!',
    timestamp: new Date().toISOString(),
    ip: req.ip
  });
});

/**
 * @route POST /api/rentals/rent
 * @desc T·∫°o order thu√™ phim
 * @access Public
 */
router.post('/rent', validateCreateRental, rentalController.createRentalOrder);

/**
 * @route POST /api/rentals/check-status
 * @desc Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n m√† kh√¥ng confirm
 * @access Public
 */
router.post('/check-status', validateConfirmPayment, rentalController.checkPaymentStatus);

/**
 * @route POST /api/rentals/confirm-payment
 * @desc X√°c nh·∫≠n thanh to√°n v√† k√≠ch ho·∫°t rental
 * @access Public
 */
router.post('/confirm-payment', validateConfirmPayment, rentalController.confirmRentalPayment);

/**
 * @route GET /api/rentals/status/:movieId
 * @desc Ki·ªÉm tra quy·ªÅn xem phim
 * @access Public
 */
router.get('/status/:movieId', (req, res, next) => {
    console.log('üõ£Ô∏è [Route] /status/:movieId hit');
    console.log('üìç [Route] Params:', req.params);
    console.log('üìç [Route] Query:', req.query);
    next();
}, validateMovieId, validateUserId, handleValidationErrors, rentalController.checkRentalAccess);

/**
 * @route GET /api/rentals/history
 * @desc L·∫•y l·ªãch s·ª≠ thu√™ phim c·ªßa user
 * @access Public
 * @query userId, page, limit, status, rentalType
 */
router.get('/history', validateUserId, rentalController.getUserRentalHistory);

/**
 * @route PUT /api/rentals/:rentalId/cancel
 * @desc H·ªßy rental
 * @access Public
 */
router.put('/:rentalId/cancel', validateRentalId, rentalController.cancelRental);

const validateActivateRental = [
    body('userId')
        .notEmpty()
        .withMessage('userId l√† b·∫Øt bu·ªôc')
        .isMongoId()
        .withMessage('userId ph·∫£i l√† ObjectId h·ª£p l·ªá'),
    body('movieId')
        .notEmpty()
        .withMessage('movieId l√† b·∫Øt bu·ªôc')
        .isMongoId()
        .withMessage('movieId ph·∫£i l√† ObjectId h·ª£p l·ªá')
];

/**
 * @route POST /api/rentals/activate
 * @desc K√≠ch ho·∫°t rental khi user nh·∫•n "xem ngay"
 * @access Public
 */
router.post('/activate', validateActivateRental, rentalController.activateRental);

// ===========================================
// STATISTICS ENDPOINTS (Admin)
// ===========================================

/**
 * @route GET /api/rentals/stats/revenue
 * @desc L·∫•y th·ªëng k√™ revenue
 * @access Admin
 */
router.get('/stats/revenue', validateDateRange, rentalController.getRevenueStats);

/**
 * @route GET /api/rentals/stats/popular
 * @desc L·∫•y danh s√°ch phim ƒë∆∞·ª£c thu√™ nhi·ªÅu nh·∫•t
 * @access Admin
 */
router.get('/stats/popular', rentalController.getPopularRentals);

// ===========================================
// CRON JOB MANAGEMENT ENDPOINTS (Admin)
// ‚ùå KH√îNG S·ª¨ D·ª§NG - Admin frontend v√† mobile app kh√¥ng g·ªçi c√°c endpoint n√†y
// üóìÔ∏è Date: 24/08/2025 - Comment ƒë·ªÉ clean unused APIs
// üîß L√Ω do: Ch·ªâ d√†nh cho system admin manual control, kh√¥ng c√≥ UI t∆∞∆°ng ·ª©ng
// ===========================================

/*
/**
 * @route GET /api/rentals/cron/status
 * @desc L·∫•y tr·∫°ng th√°i c√°c cron jobs
 * @access Admin
 */
// router.get('/cron/status', rentalController.getCronJobsStatus);

/*
/**
 * @route POST /api/rentals/cron/manual-check
 * @desc Ch·∫°y manual check rental expiration
 * @access Admin
 */
// router.post('/cron/manual-check', rentalController.runManualCheck);

/*
/**
 * @route PUT /api/rentals/cron/:action/:jobName
 * @desc Start/Stop m·ªôt cron job c·ª• th·ªÉ
 * @access Admin
 * @param action - start ho·∫∑c stop
 * @param jobName - t√™n c·ªßa job (expiredRentalsCheck, expiringNotifications, etc.)
 */
// router.put('/cron/:action/:jobName', rentalController.controlCronJob);

/*
/**
 * @route PUT /api/rentals/cron/all/:action
 * @desc Start/Stop t·∫•t c·∫£ cron jobs
 * @access Admin
 * @param action - start ho·∫∑c stop
 */
// router.put('/cron/all/:action', rentalController.controlAllCronJobs);

/*
/**
 * @route POST /api/rentals/test-expiry-notification
 * @desc Test rental expiry notification manually
 * @access Admin
 */
// router.post('/test-expiry-notification', rentalController.testRentalExpiryNotification);

// ===========================================
// WEBHOOK ENDPOINTS
// ‚ùå KH√îNG S·ª¨ D·ª§NG - Webhook handler ch∆∞a implement ƒë·∫ßy ƒë·ªß
// üóìÔ∏è Date: 24/08/2025 - Comment v√¨ logic ch∆∞a ho√†n thi·ªán
// üîß L√Ω do: TODO verify signature v√† auto-confirmation ch∆∞a ƒë∆∞·ª£c implement
// ===========================================

/*
/**
 * @route POST /api/rentals/webhook/payment-success
 * @desc Webhook t·ª´ PayOS khi thanh to√°n th√†nh c√¥ng
 * @access PayOS only
 */
// router.post('/webhook/payment-success', rentalController.handlePaymentWebhook);

module.exports = router; 